/*
SolarWinds Observability REST API

[Rest API Documentation](https://documentation.solarwinds.com/en/success_center/observability/content/api/api-swagger.htm)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package swov1

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ProbePlatformOptions type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ProbePlatformOptions{}

// ProbePlatformOptions Configure cloud platforms of the synthetic availability test probes. If omitted or set to null, no particular cloud platform will be enforced. 
type ProbePlatformOptions struct {
	ProbePlatforms []ProbePlatform `json:"probePlatforms"`
	TestFromAll *bool `json:"testFromAll,omitempty"`
}

type _ProbePlatformOptions ProbePlatformOptions

// NewProbePlatformOptions instantiates a new ProbePlatformOptions object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProbePlatformOptions(probePlatforms []ProbePlatform) *ProbePlatformOptions {
	this := ProbePlatformOptions{}
	this.ProbePlatforms = probePlatforms
	return &this
}

// NewProbePlatformOptionsWithDefaults instantiates a new ProbePlatformOptions object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProbePlatformOptionsWithDefaults() *ProbePlatformOptions {
	this := ProbePlatformOptions{}
	return &this
}

// GetProbePlatforms returns the ProbePlatforms field value
func (o *ProbePlatformOptions) GetProbePlatforms() []ProbePlatform {
	if o == nil {
		var ret []ProbePlatform
		return ret
	}

	return o.ProbePlatforms
}

// GetProbePlatformsOk returns a tuple with the ProbePlatforms field value
// and a boolean to check if the value has been set.
func (o *ProbePlatformOptions) GetProbePlatformsOk() ([]ProbePlatform, bool) {
	if o == nil {
		return nil, false
	}
	return o.ProbePlatforms, true
}

// SetProbePlatforms sets field value
func (o *ProbePlatformOptions) SetProbePlatforms(v []ProbePlatform) {
	o.ProbePlatforms = v
}

// GetTestFromAll returns the TestFromAll field value if set, zero value otherwise.
func (o *ProbePlatformOptions) GetTestFromAll() bool {
	if o == nil || IsNil(o.TestFromAll) {
		var ret bool
		return ret
	}
	return *o.TestFromAll
}

// GetTestFromAllOk returns a tuple with the TestFromAll field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProbePlatformOptions) GetTestFromAllOk() (*bool, bool) {
	if o == nil || IsNil(o.TestFromAll) {
		return nil, false
	}
	return o.TestFromAll, true
}

// HasTestFromAll returns a boolean if a field has been set.
func (o *ProbePlatformOptions) HasTestFromAll() bool {
	if o != nil && !IsNil(o.TestFromAll) {
		return true
	}

	return false
}

// SetTestFromAll gets a reference to the given bool and assigns it to the TestFromAll field.
func (o *ProbePlatformOptions) SetTestFromAll(v bool) {
	o.TestFromAll = &v
}

func (o ProbePlatformOptions) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ProbePlatformOptions) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["probePlatforms"] = o.ProbePlatforms
	if !IsNil(o.TestFromAll) {
		toSerialize["testFromAll"] = o.TestFromAll
	}
	return toSerialize, nil
}

func (o *ProbePlatformOptions) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"probePlatforms",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varProbePlatformOptions := _ProbePlatformOptions{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varProbePlatformOptions)

	if err != nil {
		return err
	}

	*o = ProbePlatformOptions(varProbePlatformOptions)

	return err
}

type NullableProbePlatformOptions struct {
	value *ProbePlatformOptions
	isSet bool
}

func (v NullableProbePlatformOptions) Get() *ProbePlatformOptions {
	return v.value
}

func (v *NullableProbePlatformOptions) Set(val *ProbePlatformOptions) {
	v.value = val
	v.isSet = true
}

func (v NullableProbePlatformOptions) IsSet() bool {
	return v.isSet
}

func (v *NullableProbePlatformOptions) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProbePlatformOptions(val *ProbePlatformOptions) *NullableProbePlatformOptions {
	return &NullableProbePlatformOptions{value: val, isSet: true}
}

func (v NullableProbePlatformOptions) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProbePlatformOptions) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


