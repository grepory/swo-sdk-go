/*
SolarWinds Observability REST API

[Rest API Documentation](https://documentation.solarwinds.com/en/success_center/observability/content/api/api-swagger.htm)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package swov1

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the LogArchiveModel type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &LogArchiveModel{}

// LogArchiveModel List of archived logs data
type LogArchiveModel struct {
	// ID of the file
	Id string `json:"id"`
	// Name of the file
	Name string `json:"name"`
	// URL location of the file
	DownloadUrl string `json:"downloadUrl"`
	// Epoc timestamp (in seconds) of archival
	ArchivedTimestamp string `json:"archivedTimestamp"`
	// Size of file in bytes
	ArchiveSize float64 `json:"archiveSize"`
}

type _LogArchiveModel LogArchiveModel

// NewLogArchiveModel instantiates a new LogArchiveModel object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLogArchiveModel(id string, name string, downloadUrl string, archivedTimestamp string, archiveSize float64) *LogArchiveModel {
	this := LogArchiveModel{}
	this.Id = id
	this.Name = name
	this.DownloadUrl = downloadUrl
	this.ArchivedTimestamp = archivedTimestamp
	this.ArchiveSize = archiveSize
	return &this
}

// NewLogArchiveModelWithDefaults instantiates a new LogArchiveModel object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLogArchiveModelWithDefaults() *LogArchiveModel {
	this := LogArchiveModel{}
	return &this
}

// GetId returns the Id field value
func (o *LogArchiveModel) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *LogArchiveModel) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *LogArchiveModel) SetId(v string) {
	o.Id = v
}

// GetName returns the Name field value
func (o *LogArchiveModel) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *LogArchiveModel) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *LogArchiveModel) SetName(v string) {
	o.Name = v
}

// GetDownloadUrl returns the DownloadUrl field value
func (o *LogArchiveModel) GetDownloadUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DownloadUrl
}

// GetDownloadUrlOk returns a tuple with the DownloadUrl field value
// and a boolean to check if the value has been set.
func (o *LogArchiveModel) GetDownloadUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DownloadUrl, true
}

// SetDownloadUrl sets field value
func (o *LogArchiveModel) SetDownloadUrl(v string) {
	o.DownloadUrl = v
}

// GetArchivedTimestamp returns the ArchivedTimestamp field value
func (o *LogArchiveModel) GetArchivedTimestamp() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ArchivedTimestamp
}

// GetArchivedTimestampOk returns a tuple with the ArchivedTimestamp field value
// and a boolean to check if the value has been set.
func (o *LogArchiveModel) GetArchivedTimestampOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ArchivedTimestamp, true
}

// SetArchivedTimestamp sets field value
func (o *LogArchiveModel) SetArchivedTimestamp(v string) {
	o.ArchivedTimestamp = v
}

// GetArchiveSize returns the ArchiveSize field value
func (o *LogArchiveModel) GetArchiveSize() float64 {
	if o == nil {
		var ret float64
		return ret
	}

	return o.ArchiveSize
}

// GetArchiveSizeOk returns a tuple with the ArchiveSize field value
// and a boolean to check if the value has been set.
func (o *LogArchiveModel) GetArchiveSizeOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ArchiveSize, true
}

// SetArchiveSize sets field value
func (o *LogArchiveModel) SetArchiveSize(v float64) {
	o.ArchiveSize = v
}

func (o LogArchiveModel) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LogArchiveModel) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["name"] = o.Name
	toSerialize["downloadUrl"] = o.DownloadUrl
	toSerialize["archivedTimestamp"] = o.ArchivedTimestamp
	toSerialize["archiveSize"] = o.ArchiveSize
	return toSerialize, nil
}

func (o *LogArchiveModel) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"name",
		"downloadUrl",
		"archivedTimestamp",
		"archiveSize",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varLogArchiveModel := _LogArchiveModel{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varLogArchiveModel)

	if err != nil {
		return err
	}

	*o = LogArchiveModel(varLogArchiveModel)

	return err
}

type NullableLogArchiveModel struct {
	value *LogArchiveModel
	isSet bool
}

func (v NullableLogArchiveModel) Get() *LogArchiveModel {
	return v.value
}

func (v *NullableLogArchiveModel) Set(val *LogArchiveModel) {
	v.value = val
	v.isSet = true
}

func (v NullableLogArchiveModel) IsSet() bool {
	return v.isSet
}

func (v *NullableLogArchiveModel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLogArchiveModel(val *LogArchiveModel) *NullableLogArchiveModel {
	return &NullableLogArchiveModel{value: val, isSet: true}
}

func (v NullableLogArchiveModel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLogArchiveModel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


