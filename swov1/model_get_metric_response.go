/*
SolarWinds Observability REST API

[Rest API Documentation](https://documentation.solarwinds.com/en/success_center/observability/content/api/api-swagger.htm)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package swov1

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the GetMetricResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GetMetricResponse{}

// GetMetricResponse struct for GetMetricResponse
type GetMetricResponse struct {
	Name string `json:"name"`
	Units *string `json:"units,omitempty"`
	Formula *string `json:"formula,omitempty"`
	LastReportedTime *string `json:"lastReportedTime,omitempty"`
}

type _GetMetricResponse GetMetricResponse

// NewGetMetricResponse instantiates a new GetMetricResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGetMetricResponse(name string) *GetMetricResponse {
	this := GetMetricResponse{}
	this.Name = name
	return &this
}

// NewGetMetricResponseWithDefaults instantiates a new GetMetricResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGetMetricResponseWithDefaults() *GetMetricResponse {
	this := GetMetricResponse{}
	return &this
}

// GetName returns the Name field value
func (o *GetMetricResponse) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *GetMetricResponse) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *GetMetricResponse) SetName(v string) {
	o.Name = v
}

// GetUnits returns the Units field value if set, zero value otherwise.
func (o *GetMetricResponse) GetUnits() string {
	if o == nil || IsNil(o.Units) {
		var ret string
		return ret
	}
	return *o.Units
}

// GetUnitsOk returns a tuple with the Units field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetMetricResponse) GetUnitsOk() (*string, bool) {
	if o == nil || IsNil(o.Units) {
		return nil, false
	}
	return o.Units, true
}

// HasUnits returns a boolean if a field has been set.
func (o *GetMetricResponse) HasUnits() bool {
	if o != nil && !IsNil(o.Units) {
		return true
	}

	return false
}

// SetUnits gets a reference to the given string and assigns it to the Units field.
func (o *GetMetricResponse) SetUnits(v string) {
	o.Units = &v
}

// GetFormula returns the Formula field value if set, zero value otherwise.
func (o *GetMetricResponse) GetFormula() string {
	if o == nil || IsNil(o.Formula) {
		var ret string
		return ret
	}
	return *o.Formula
}

// GetFormulaOk returns a tuple with the Formula field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetMetricResponse) GetFormulaOk() (*string, bool) {
	if o == nil || IsNil(o.Formula) {
		return nil, false
	}
	return o.Formula, true
}

// HasFormula returns a boolean if a field has been set.
func (o *GetMetricResponse) HasFormula() bool {
	if o != nil && !IsNil(o.Formula) {
		return true
	}

	return false
}

// SetFormula gets a reference to the given string and assigns it to the Formula field.
func (o *GetMetricResponse) SetFormula(v string) {
	o.Formula = &v
}

// GetLastReportedTime returns the LastReportedTime field value if set, zero value otherwise.
func (o *GetMetricResponse) GetLastReportedTime() string {
	if o == nil || IsNil(o.LastReportedTime) {
		var ret string
		return ret
	}
	return *o.LastReportedTime
}

// GetLastReportedTimeOk returns a tuple with the LastReportedTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetMetricResponse) GetLastReportedTimeOk() (*string, bool) {
	if o == nil || IsNil(o.LastReportedTime) {
		return nil, false
	}
	return o.LastReportedTime, true
}

// HasLastReportedTime returns a boolean if a field has been set.
func (o *GetMetricResponse) HasLastReportedTime() bool {
	if o != nil && !IsNil(o.LastReportedTime) {
		return true
	}

	return false
}

// SetLastReportedTime gets a reference to the given string and assigns it to the LastReportedTime field.
func (o *GetMetricResponse) SetLastReportedTime(v string) {
	o.LastReportedTime = &v
}

func (o GetMetricResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GetMetricResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	if !IsNil(o.Units) {
		toSerialize["units"] = o.Units
	}
	if !IsNil(o.Formula) {
		toSerialize["formula"] = o.Formula
	}
	if !IsNil(o.LastReportedTime) {
		toSerialize["lastReportedTime"] = o.LastReportedTime
	}
	return toSerialize, nil
}

func (o *GetMetricResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varGetMetricResponse := _GetMetricResponse{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varGetMetricResponse)

	if err != nil {
		return err
	}

	*o = GetMetricResponse(varGetMetricResponse)

	return err
}

type NullableGetMetricResponse struct {
	value *GetMetricResponse
	isSet bool
}

func (v NullableGetMetricResponse) Get() *GetMetricResponse {
	return v.value
}

func (v *NullableGetMetricResponse) Set(val *GetMetricResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableGetMetricResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableGetMetricResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetMetricResponse(val *GetMetricResponse) *NullableGetMetricResponse {
	return &NullableGetMetricResponse{value: val, isSet: true}
}

func (v NullableGetMetricResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetMetricResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


