/*
SolarWinds Observability REST API

[Rest API Documentation](https://documentation.solarwinds.com/en/success_center/observability/content/api/api-swagger.htm)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package swov1

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the TestFrom type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TestFrom{}

// TestFrom Configure locations of the synthetic availability test probes. Acceptable `values` depend on the selected `type` and actual values of existing probes. To find out all possible `values` of each type, fetch the probes from the `/v1/probes` path. 
type TestFrom struct {
	Type ProbeLocationType `json:"type"`
	// A list of probe location values of the selected `type`. At least one value matching an existing probe must be provided. 
	Values []string `json:"values"`
}

type _TestFrom TestFrom

// NewTestFrom instantiates a new TestFrom object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTestFrom(type_ ProbeLocationType, values []string) *TestFrom {
	this := TestFrom{}
	this.Type = type_
	this.Values = values
	return &this
}

// NewTestFromWithDefaults instantiates a new TestFrom object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTestFromWithDefaults() *TestFrom {
	this := TestFrom{}
	return &this
}

// GetType returns the Type field value
func (o *TestFrom) GetType() ProbeLocationType {
	if o == nil {
		var ret ProbeLocationType
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *TestFrom) GetTypeOk() (*ProbeLocationType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *TestFrom) SetType(v ProbeLocationType) {
	o.Type = v
}

// GetValues returns the Values field value
func (o *TestFrom) GetValues() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Values
}

// GetValuesOk returns a tuple with the Values field value
// and a boolean to check if the value has been set.
func (o *TestFrom) GetValuesOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Values, true
}

// SetValues sets field value
func (o *TestFrom) SetValues(v []string) {
	o.Values = v
}

func (o TestFrom) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TestFrom) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["type"] = o.Type
	toSerialize["values"] = o.Values
	return toSerialize, nil
}

func (o *TestFrom) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"type",
		"values",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTestFrom := _TestFrom{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varTestFrom)

	if err != nil {
		return err
	}

	*o = TestFrom(varTestFrom)

	return err
}

type NullableTestFrom struct {
	value *TestFrom
	isSet bool
}

func (v NullableTestFrom) Get() *TestFrom {
	return v.value
}

func (v *NullableTestFrom) Set(val *TestFrom) {
	v.value = val
	v.isSet = true
}

func (v NullableTestFrom) IsSet() bool {
	return v.isSet
}

func (v *NullableTestFrom) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTestFrom(val *TestFrom) *NullableTestFrom {
	return &NullableTestFrom{value: val, isSet: true}
}

func (v NullableTestFrom) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTestFrom) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


