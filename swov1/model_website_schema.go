/*
SolarWinds Observability REST API

[Rest API Documentation](https://documentation.solarwinds.com/en/success_center/observability/content/api/api-swagger.htm)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package swov1

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the WebsiteSchema type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &WebsiteSchema{}

// WebsiteSchema struct for WebsiteSchema
type WebsiteSchema struct {
	// Name of the website, which must be unique within the organization. The website must also not contain any control characters, any white space other than space (U+0020), or any consecutive, leading or trailing spaces. 
	Name string `json:"name"`
	// URL of the website. Must be a valid URL with no leading or trailing white space. Must not contain invalid port number (>65535). 
	Url string `json:"url"`
	AvailabilityCheckSettings NullableWebsiteSchemaAvailabilityCheckSettings `json:"availabilityCheckSettings,omitempty"`
	Rum NullableWebsiteSchemaRum `json:"rum,omitempty"`
}

type _WebsiteSchema WebsiteSchema

// NewWebsiteSchema instantiates a new WebsiteSchema object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWebsiteSchema(name string, url string) *WebsiteSchema {
	this := WebsiteSchema{}
	this.Name = name
	this.Url = url
	return &this
}

// NewWebsiteSchemaWithDefaults instantiates a new WebsiteSchema object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWebsiteSchemaWithDefaults() *WebsiteSchema {
	this := WebsiteSchema{}
	return &this
}

// GetName returns the Name field value
func (o *WebsiteSchema) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *WebsiteSchema) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *WebsiteSchema) SetName(v string) {
	o.Name = v
}

// GetUrl returns the Url field value
func (o *WebsiteSchema) GetUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Url
}

// GetUrlOk returns a tuple with the Url field value
// and a boolean to check if the value has been set.
func (o *WebsiteSchema) GetUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Url, true
}

// SetUrl sets field value
func (o *WebsiteSchema) SetUrl(v string) {
	o.Url = v
}

// GetAvailabilityCheckSettings returns the AvailabilityCheckSettings field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *WebsiteSchema) GetAvailabilityCheckSettings() WebsiteSchemaAvailabilityCheckSettings {
	if o == nil || IsNil(o.AvailabilityCheckSettings.Get()) {
		var ret WebsiteSchemaAvailabilityCheckSettings
		return ret
	}
	return *o.AvailabilityCheckSettings.Get()
}

// GetAvailabilityCheckSettingsOk returns a tuple with the AvailabilityCheckSettings field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *WebsiteSchema) GetAvailabilityCheckSettingsOk() (*WebsiteSchemaAvailabilityCheckSettings, bool) {
	if o == nil {
		return nil, false
	}
	return o.AvailabilityCheckSettings.Get(), o.AvailabilityCheckSettings.IsSet()
}

// HasAvailabilityCheckSettings returns a boolean if a field has been set.
func (o *WebsiteSchema) HasAvailabilityCheckSettings() bool {
	if o != nil && o.AvailabilityCheckSettings.IsSet() {
		return true
	}

	return false
}

// SetAvailabilityCheckSettings gets a reference to the given NullableWebsiteSchemaAvailabilityCheckSettings and assigns it to the AvailabilityCheckSettings field.
func (o *WebsiteSchema) SetAvailabilityCheckSettings(v WebsiteSchemaAvailabilityCheckSettings) {
	o.AvailabilityCheckSettings.Set(&v)
}
// SetAvailabilityCheckSettingsNil sets the value for AvailabilityCheckSettings to be an explicit nil
func (o *WebsiteSchema) SetAvailabilityCheckSettingsNil() {
	o.AvailabilityCheckSettings.Set(nil)
}

// UnsetAvailabilityCheckSettings ensures that no value is present for AvailabilityCheckSettings, not even an explicit nil
func (o *WebsiteSchema) UnsetAvailabilityCheckSettings() {
	o.AvailabilityCheckSettings.Unset()
}

// GetRum returns the Rum field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *WebsiteSchema) GetRum() WebsiteSchemaRum {
	if o == nil || IsNil(o.Rum.Get()) {
		var ret WebsiteSchemaRum
		return ret
	}
	return *o.Rum.Get()
}

// GetRumOk returns a tuple with the Rum field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *WebsiteSchema) GetRumOk() (*WebsiteSchemaRum, bool) {
	if o == nil {
		return nil, false
	}
	return o.Rum.Get(), o.Rum.IsSet()
}

// HasRum returns a boolean if a field has been set.
func (o *WebsiteSchema) HasRum() bool {
	if o != nil && o.Rum.IsSet() {
		return true
	}

	return false
}

// SetRum gets a reference to the given NullableWebsiteSchemaRum and assigns it to the Rum field.
func (o *WebsiteSchema) SetRum(v WebsiteSchemaRum) {
	o.Rum.Set(&v)
}
// SetRumNil sets the value for Rum to be an explicit nil
func (o *WebsiteSchema) SetRumNil() {
	o.Rum.Set(nil)
}

// UnsetRum ensures that no value is present for Rum, not even an explicit nil
func (o *WebsiteSchema) UnsetRum() {
	o.Rum.Unset()
}

func (o WebsiteSchema) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o WebsiteSchema) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	toSerialize["url"] = o.Url
	if o.AvailabilityCheckSettings.IsSet() {
		toSerialize["availabilityCheckSettings"] = o.AvailabilityCheckSettings.Get()
	}
	if o.Rum.IsSet() {
		toSerialize["rum"] = o.Rum.Get()
	}
	return toSerialize, nil
}

func (o *WebsiteSchema) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"url",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varWebsiteSchema := _WebsiteSchema{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varWebsiteSchema)

	if err != nil {
		return err
	}

	*o = WebsiteSchema(varWebsiteSchema)

	return err
}

type NullableWebsiteSchema struct {
	value *WebsiteSchema
	isSet bool
}

func (v NullableWebsiteSchema) Get() *WebsiteSchema {
	return v.value
}

func (v *NullableWebsiteSchema) Set(val *WebsiteSchema) {
	v.value = val
	v.isSet = true
}

func (v NullableWebsiteSchema) IsSet() bool {
	return v.isSet
}

func (v *NullableWebsiteSchema) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWebsiteSchema(val *WebsiteSchema) *NullableWebsiteSchema {
	return &NullableWebsiteSchema{value: val, isSet: true}
}

func (v NullableWebsiteSchema) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWebsiteSchema) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


