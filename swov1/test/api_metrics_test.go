/*
SolarWinds Observability REST API

Testing MetricsAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package swov1

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	swoclient "github.com/solarwinds/swo-sdk-go/swov1"
)

func Test_swov1_MetricsAPIService(t *testing.T) {

	configuration := swoclient.NewConfiguration()
	apiClient := swoclient.NewAPIClient(configuration)

	t.Run("Test MetricsAPIService GetMetric", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		resp, httpRes, err := apiClient.MetricsAPI.GetMetric(context.Background(), name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MetricsAPIService ListMetricAttributeNames", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		resp, httpRes, err := apiClient.MetricsAPI.ListMetricAttributeNames(context.Background(), name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MetricsAPIService ListMetricAttributeValues", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string
		var attributeName string

		resp, httpRes, err := apiClient.MetricsAPI.ListMetricAttributeValues(context.Background(), name, attributeName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MetricsAPIService ListMetricMeasurements", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		resp, httpRes, err := apiClient.MetricsAPI.ListMetricMeasurements(context.Background(), name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MetricsAPIService ListMetrics", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.MetricsAPI.ListMetrics(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
