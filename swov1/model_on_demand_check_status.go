/*
SolarWinds Observability REST API

[Rest API Documentation](https://documentation.solarwinds.com/en/success_center/observability/content/api/api-swagger.htm)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package swov1

import (
	"encoding/json"
	"fmt"
)

// OnDemandCheckStatus the model 'OnDemandCheckStatus'
type OnDemandCheckStatus string

// List of OnDemandCheckStatus
const (
	UNSPECIFIED OnDemandCheckStatus = "UNSPECIFIED"
	OK OnDemandCheckStatus = "OK"
	TOO_EARLY OnDemandCheckStatus = "TOO_EARLY"
)

// All allowed values of OnDemandCheckStatus enum
var AllowedOnDemandCheckStatusEnumValues = []OnDemandCheckStatus{
	"UNSPECIFIED",
	"OK",
	"TOO_EARLY",
}

func (v *OnDemandCheckStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := OnDemandCheckStatus(value)
	for _, existing := range AllowedOnDemandCheckStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid OnDemandCheckStatus", value)
}

// NewOnDemandCheckStatusFromValue returns a pointer to a valid OnDemandCheckStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewOnDemandCheckStatusFromValue(v string) (*OnDemandCheckStatus, error) {
	ev := OnDemandCheckStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for OnDemandCheckStatus: valid values are %v", v, AllowedOnDemandCheckStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v OnDemandCheckStatus) IsValid() bool {
	for _, existing := range AllowedOnDemandCheckStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to OnDemandCheckStatus value
func (v OnDemandCheckStatus) Ptr() *OnDemandCheckStatus {
	return &v
}

type NullableOnDemandCheckStatus struct {
	value *OnDemandCheckStatus
	isSet bool
}

func (v NullableOnDemandCheckStatus) Get() *OnDemandCheckStatus {
	return v.value
}

func (v *NullableOnDemandCheckStatus) Set(val *OnDemandCheckStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableOnDemandCheckStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableOnDemandCheckStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOnDemandCheckStatus(val *OnDemandCheckStatus) *NullableOnDemandCheckStatus {
	return &NullableOnDemandCheckStatus{value: val, isSet: true}
}

func (v NullableOnDemandCheckStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOnDemandCheckStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

