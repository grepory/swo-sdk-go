/*
SolarWinds Observability REST API

[Rest API Documentation](https://documentation.solarwinds.com/en/success_center/observability/content/api/api-swagger.htm)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package swov1

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the LogsResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &LogsResponse{}

// LogsResponse struct for LogsResponse
type LogsResponse struct {
	Logs []RestLogEvent `json:"logs"`
	PageInfo *PageInfo `json:"pageInfo,omitempty"`
}

type _LogsResponse LogsResponse

// NewLogsResponse instantiates a new LogsResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLogsResponse(logs []RestLogEvent) *LogsResponse {
	this := LogsResponse{}
	this.Logs = logs
	return &this
}

// NewLogsResponseWithDefaults instantiates a new LogsResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLogsResponseWithDefaults() *LogsResponse {
	this := LogsResponse{}
	return &this
}

// GetLogs returns the Logs field value
func (o *LogsResponse) GetLogs() []RestLogEvent {
	if o == nil {
		var ret []RestLogEvent
		return ret
	}

	return o.Logs
}

// GetLogsOk returns a tuple with the Logs field value
// and a boolean to check if the value has been set.
func (o *LogsResponse) GetLogsOk() ([]RestLogEvent, bool) {
	if o == nil {
		return nil, false
	}
	return o.Logs, true
}

// SetLogs sets field value
func (o *LogsResponse) SetLogs(v []RestLogEvent) {
	o.Logs = v
}

// GetPageInfo returns the PageInfo field value if set, zero value otherwise.
func (o *LogsResponse) GetPageInfo() PageInfo {
	if o == nil || IsNil(o.PageInfo) {
		var ret PageInfo
		return ret
	}
	return *o.PageInfo
}

// GetPageInfoOk returns a tuple with the PageInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LogsResponse) GetPageInfoOk() (*PageInfo, bool) {
	if o == nil || IsNil(o.PageInfo) {
		return nil, false
	}
	return o.PageInfo, true
}

// HasPageInfo returns a boolean if a field has been set.
func (o *LogsResponse) HasPageInfo() bool {
	if o != nil && !IsNil(o.PageInfo) {
		return true
	}

	return false
}

// SetPageInfo gets a reference to the given PageInfo and assigns it to the PageInfo field.
func (o *LogsResponse) SetPageInfo(v PageInfo) {
	o.PageInfo = &v
}

func (o LogsResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LogsResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["logs"] = o.Logs
	if !IsNil(o.PageInfo) {
		toSerialize["pageInfo"] = o.PageInfo
	}
	return toSerialize, nil
}

func (o *LogsResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"logs",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varLogsResponse := _LogsResponse{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varLogsResponse)

	if err != nil {
		return err
	}

	*o = LogsResponse(varLogsResponse)

	return err
}

type NullableLogsResponse struct {
	value *LogsResponse
	isSet bool
}

func (v NullableLogsResponse) Get() *LogsResponse {
	return v.value
}

func (v *NullableLogsResponse) Set(val *LogsResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableLogsResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableLogsResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLogsResponse(val *LogsResponse) *NullableLogsResponse {
	return &NullableLogsResponse{value: val, isSet: true}
}

func (v NullableLogsResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLogsResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


