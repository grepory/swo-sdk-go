/*
SolarWinds Observability REST API

[Rest API Documentation](https://documentation.solarwinds.com/en/success_center/observability/content/api/api-swagger.htm)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package swov1

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ChangeEvent type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ChangeEvent{}

// ChangeEvent struct for ChangeEvent
type ChangeEvent struct {
	Id *int64 `json:"id,omitempty"`
	Name string `json:"name"`
	Title string `json:"title"`
	Timestamp *int64 `json:"timestamp,omitempty"`
	Source *string `json:"source,omitempty"`
	Description *string `json:"description,omitempty"`
	ParentEventId *int64 `json:"parentEventId,omitempty"`
	Tags *map[string]string `json:"tags,omitempty"`
	Links []Link `json:"links,omitempty"`
}

type _ChangeEvent ChangeEvent

// NewChangeEvent instantiates a new ChangeEvent object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewChangeEvent(name string, title string) *ChangeEvent {
	this := ChangeEvent{}
	this.Name = name
	this.Title = title
	return &this
}

// NewChangeEventWithDefaults instantiates a new ChangeEvent object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewChangeEventWithDefaults() *ChangeEvent {
	this := ChangeEvent{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ChangeEvent) GetId() int64 {
	if o == nil || IsNil(o.Id) {
		var ret int64
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChangeEvent) GetIdOk() (*int64, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ChangeEvent) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int64 and assigns it to the Id field.
func (o *ChangeEvent) SetId(v int64) {
	o.Id = &v
}

// GetName returns the Name field value
func (o *ChangeEvent) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *ChangeEvent) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *ChangeEvent) SetName(v string) {
	o.Name = v
}

// GetTitle returns the Title field value
func (o *ChangeEvent) GetTitle() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Title
}

// GetTitleOk returns a tuple with the Title field value
// and a boolean to check if the value has been set.
func (o *ChangeEvent) GetTitleOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Title, true
}

// SetTitle sets field value
func (o *ChangeEvent) SetTitle(v string) {
	o.Title = v
}

// GetTimestamp returns the Timestamp field value if set, zero value otherwise.
func (o *ChangeEvent) GetTimestamp() int64 {
	if o == nil || IsNil(o.Timestamp) {
		var ret int64
		return ret
	}
	return *o.Timestamp
}

// GetTimestampOk returns a tuple with the Timestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChangeEvent) GetTimestampOk() (*int64, bool) {
	if o == nil || IsNil(o.Timestamp) {
		return nil, false
	}
	return o.Timestamp, true
}

// HasTimestamp returns a boolean if a field has been set.
func (o *ChangeEvent) HasTimestamp() bool {
	if o != nil && !IsNil(o.Timestamp) {
		return true
	}

	return false
}

// SetTimestamp gets a reference to the given int64 and assigns it to the Timestamp field.
func (o *ChangeEvent) SetTimestamp(v int64) {
	o.Timestamp = &v
}

// GetSource returns the Source field value if set, zero value otherwise.
func (o *ChangeEvent) GetSource() string {
	if o == nil || IsNil(o.Source) {
		var ret string
		return ret
	}
	return *o.Source
}

// GetSourceOk returns a tuple with the Source field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChangeEvent) GetSourceOk() (*string, bool) {
	if o == nil || IsNil(o.Source) {
		return nil, false
	}
	return o.Source, true
}

// HasSource returns a boolean if a field has been set.
func (o *ChangeEvent) HasSource() bool {
	if o != nil && !IsNil(o.Source) {
		return true
	}

	return false
}

// SetSource gets a reference to the given string and assigns it to the Source field.
func (o *ChangeEvent) SetSource(v string) {
	o.Source = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *ChangeEvent) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChangeEvent) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *ChangeEvent) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *ChangeEvent) SetDescription(v string) {
	o.Description = &v
}

// GetParentEventId returns the ParentEventId field value if set, zero value otherwise.
func (o *ChangeEvent) GetParentEventId() int64 {
	if o == nil || IsNil(o.ParentEventId) {
		var ret int64
		return ret
	}
	return *o.ParentEventId
}

// GetParentEventIdOk returns a tuple with the ParentEventId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChangeEvent) GetParentEventIdOk() (*int64, bool) {
	if o == nil || IsNil(o.ParentEventId) {
		return nil, false
	}
	return o.ParentEventId, true
}

// HasParentEventId returns a boolean if a field has been set.
func (o *ChangeEvent) HasParentEventId() bool {
	if o != nil && !IsNil(o.ParentEventId) {
		return true
	}

	return false
}

// SetParentEventId gets a reference to the given int64 and assigns it to the ParentEventId field.
func (o *ChangeEvent) SetParentEventId(v int64) {
	o.ParentEventId = &v
}

// GetTags returns the Tags field value if set, zero value otherwise.
func (o *ChangeEvent) GetTags() map[string]string {
	if o == nil || IsNil(o.Tags) {
		var ret map[string]string
		return ret
	}
	return *o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChangeEvent) GetTagsOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Tags) {
		return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *ChangeEvent) HasTags() bool {
	if o != nil && !IsNil(o.Tags) {
		return true
	}

	return false
}

// SetTags gets a reference to the given map[string]string and assigns it to the Tags field.
func (o *ChangeEvent) SetTags(v map[string]string) {
	o.Tags = &v
}

// GetLinks returns the Links field value if set, zero value otherwise.
func (o *ChangeEvent) GetLinks() []Link {
	if o == nil || IsNil(o.Links) {
		var ret []Link
		return ret
	}
	return o.Links
}

// GetLinksOk returns a tuple with the Links field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChangeEvent) GetLinksOk() ([]Link, bool) {
	if o == nil || IsNil(o.Links) {
		return nil, false
	}
	return o.Links, true
}

// HasLinks returns a boolean if a field has been set.
func (o *ChangeEvent) HasLinks() bool {
	if o != nil && !IsNil(o.Links) {
		return true
	}

	return false
}

// SetLinks gets a reference to the given []Link and assigns it to the Links field.
func (o *ChangeEvent) SetLinks(v []Link) {
	o.Links = v
}

func (o ChangeEvent) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ChangeEvent) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	toSerialize["name"] = o.Name
	toSerialize["title"] = o.Title
	if !IsNil(o.Timestamp) {
		toSerialize["timestamp"] = o.Timestamp
	}
	if !IsNil(o.Source) {
		toSerialize["source"] = o.Source
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.ParentEventId) {
		toSerialize["parentEventId"] = o.ParentEventId
	}
	if !IsNil(o.Tags) {
		toSerialize["tags"] = o.Tags
	}
	if !IsNil(o.Links) {
		toSerialize["links"] = o.Links
	}
	return toSerialize, nil
}

func (o *ChangeEvent) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"title",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varChangeEvent := _ChangeEvent{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varChangeEvent)

	if err != nil {
		return err
	}

	*o = ChangeEvent(varChangeEvent)

	return err
}

type NullableChangeEvent struct {
	value *ChangeEvent
	isSet bool
}

func (v NullableChangeEvent) Get() *ChangeEvent {
	return v.value
}

func (v *NullableChangeEvent) Set(val *ChangeEvent) {
	v.value = val
	v.isSet = true
}

func (v NullableChangeEvent) IsSet() bool {
	return v.isSet
}

func (v *NullableChangeEvent) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableChangeEvent(val *ChangeEvent) *NullableChangeEvent {
	return &NullableChangeEvent{value: val, isSet: true}
}

func (v NullableChangeEvent) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableChangeEvent) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


