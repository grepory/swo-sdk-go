/*
SolarWinds Observability REST API

[Rest API Documentation](https://documentation.solarwinds.com/en/success_center/observability/content/api/api-swagger.htm)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package swov1

import (
	"encoding/json"
	"fmt"
)

// ProbeLocationType Specificity for location of synthetic probes to be used for availability tests.
type ProbeLocationType string

// List of ProbeLocationType
const (
	REGION ProbeLocationType = "REGION"
	COUNTRY ProbeLocationType = "COUNTRY"
	CITY ProbeLocationType = "CITY"
)

// All allowed values of ProbeLocationType enum
var AllowedProbeLocationTypeEnumValues = []ProbeLocationType{
	"REGION",
	"COUNTRY",
	"CITY",
}

func (v *ProbeLocationType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ProbeLocationType(value)
	for _, existing := range AllowedProbeLocationTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ProbeLocationType", value)
}

// NewProbeLocationTypeFromValue returns a pointer to a valid ProbeLocationType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewProbeLocationTypeFromValue(v string) (*ProbeLocationType, error) {
	ev := ProbeLocationType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ProbeLocationType: valid values are %v", v, AllowedProbeLocationTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ProbeLocationType) IsValid() bool {
	for _, existing := range AllowedProbeLocationTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ProbeLocationType value
func (v ProbeLocationType) Ptr() *ProbeLocationType {
	return &v
}

type NullableProbeLocationType struct {
	value *ProbeLocationType
	isSet bool
}

func (v NullableProbeLocationType) Get() *ProbeLocationType {
	return v.value
}

func (v *NullableProbeLocationType) Set(val *ProbeLocationType) {
	v.value = val
	v.isSet = true
}

func (v NullableProbeLocationType) IsSet() bool {
	return v.isSet
}

func (v *NullableProbeLocationType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProbeLocationType(val *ProbeLocationType) *NullableProbeLocationType {
	return &NullableProbeLocationType{value: val, isSet: true}
}

func (v NullableProbeLocationType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProbeLocationType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

