/*
SolarWinds Observability REST API

[Rest API Documentation](https://documentation.solarwinds.com/en/success_center/observability/content/api/api-swagger.htm)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package swov1

import (
	"encoding/json"
	"fmt"
)

// ProbePlatform Cloud platforms hosting synthetic probes.
type ProbePlatform string

// List of ProbePlatform
const (
	AWS ProbePlatform = "AWS"
	AZURE ProbePlatform = "AZURE"
	GOOGLE_CLOUD ProbePlatform = "GOOGLE_CLOUD"
)

// All allowed values of ProbePlatform enum
var AllowedProbePlatformEnumValues = []ProbePlatform{
	"AWS",
	"AZURE",
	"GOOGLE_CLOUD",
}

func (v *ProbePlatform) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ProbePlatform(value)
	for _, existing := range AllowedProbePlatformEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ProbePlatform", value)
}

// NewProbePlatformFromValue returns a pointer to a valid ProbePlatform
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewProbePlatformFromValue(v string) (*ProbePlatform, error) {
	ev := ProbePlatform(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ProbePlatform: valid values are %v", v, AllowedProbePlatformEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ProbePlatform) IsValid() bool {
	for _, existing := range AllowedProbePlatformEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ProbePlatform value
func (v ProbePlatform) Ptr() *ProbePlatform {
	return &v
}

type NullableProbePlatform struct {
	value *ProbePlatform
	isSet bool
}

func (v NullableProbePlatform) Get() *ProbePlatform {
	return v.value
}

func (v *NullableProbePlatform) Set(val *ProbePlatform) {
	v.value = val
	v.isSet = true
}

func (v NullableProbePlatform) IsSet() bool {
	return v.isSet
}

func (v *NullableProbePlatform) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProbePlatform(val *ProbePlatform) *NullableProbePlatform {
	return &NullableProbePlatform{value: val, isSet: true}
}

func (v NullableProbePlatform) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProbePlatform) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

