/*
SolarWinds Observability REST API

[Rest API Documentation](https://documentation.solarwinds.com/en/success_center/observability/content/api/api-swagger.htm)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package swov1

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the SslCertificatesAllOfCertificates type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SslCertificatesAllOfCertificates{}

// SslCertificatesAllOfCertificates struct for SslCertificatesAllOfCertificates
type SslCertificatesAllOfCertificates struct {
	Expired []SslCertificate `json:"expired"`
	Expiring []SslCertificate `json:"expiring"`
	Invalid []SslCertificate `json:"invalid"`
	Valid []SslCertificate `json:"valid"`
}

type _SslCertificatesAllOfCertificates SslCertificatesAllOfCertificates

// NewSslCertificatesAllOfCertificates instantiates a new SslCertificatesAllOfCertificates object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSslCertificatesAllOfCertificates(expired []SslCertificate, expiring []SslCertificate, invalid []SslCertificate, valid []SslCertificate) *SslCertificatesAllOfCertificates {
	this := SslCertificatesAllOfCertificates{}
	this.Expired = expired
	this.Expiring = expiring
	this.Invalid = invalid
	this.Valid = valid
	return &this
}

// NewSslCertificatesAllOfCertificatesWithDefaults instantiates a new SslCertificatesAllOfCertificates object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSslCertificatesAllOfCertificatesWithDefaults() *SslCertificatesAllOfCertificates {
	this := SslCertificatesAllOfCertificates{}
	return &this
}

// GetExpired returns the Expired field value
func (o *SslCertificatesAllOfCertificates) GetExpired() []SslCertificate {
	if o == nil {
		var ret []SslCertificate
		return ret
	}

	return o.Expired
}

// GetExpiredOk returns a tuple with the Expired field value
// and a boolean to check if the value has been set.
func (o *SslCertificatesAllOfCertificates) GetExpiredOk() ([]SslCertificate, bool) {
	if o == nil {
		return nil, false
	}
	return o.Expired, true
}

// SetExpired sets field value
func (o *SslCertificatesAllOfCertificates) SetExpired(v []SslCertificate) {
	o.Expired = v
}

// GetExpiring returns the Expiring field value
func (o *SslCertificatesAllOfCertificates) GetExpiring() []SslCertificate {
	if o == nil {
		var ret []SslCertificate
		return ret
	}

	return o.Expiring
}

// GetExpiringOk returns a tuple with the Expiring field value
// and a boolean to check if the value has been set.
func (o *SslCertificatesAllOfCertificates) GetExpiringOk() ([]SslCertificate, bool) {
	if o == nil {
		return nil, false
	}
	return o.Expiring, true
}

// SetExpiring sets field value
func (o *SslCertificatesAllOfCertificates) SetExpiring(v []SslCertificate) {
	o.Expiring = v
}

// GetInvalid returns the Invalid field value
func (o *SslCertificatesAllOfCertificates) GetInvalid() []SslCertificate {
	if o == nil {
		var ret []SslCertificate
		return ret
	}

	return o.Invalid
}

// GetInvalidOk returns a tuple with the Invalid field value
// and a boolean to check if the value has been set.
func (o *SslCertificatesAllOfCertificates) GetInvalidOk() ([]SslCertificate, bool) {
	if o == nil {
		return nil, false
	}
	return o.Invalid, true
}

// SetInvalid sets field value
func (o *SslCertificatesAllOfCertificates) SetInvalid(v []SslCertificate) {
	o.Invalid = v
}

// GetValid returns the Valid field value
func (o *SslCertificatesAllOfCertificates) GetValid() []SslCertificate {
	if o == nil {
		var ret []SslCertificate
		return ret
	}

	return o.Valid
}

// GetValidOk returns a tuple with the Valid field value
// and a boolean to check if the value has been set.
func (o *SslCertificatesAllOfCertificates) GetValidOk() ([]SslCertificate, bool) {
	if o == nil {
		return nil, false
	}
	return o.Valid, true
}

// SetValid sets field value
func (o *SslCertificatesAllOfCertificates) SetValid(v []SslCertificate) {
	o.Valid = v
}

func (o SslCertificatesAllOfCertificates) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SslCertificatesAllOfCertificates) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["expired"] = o.Expired
	toSerialize["expiring"] = o.Expiring
	toSerialize["invalid"] = o.Invalid
	toSerialize["valid"] = o.Valid
	return toSerialize, nil
}

func (o *SslCertificatesAllOfCertificates) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"expired",
		"expiring",
		"invalid",
		"valid",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSslCertificatesAllOfCertificates := _SslCertificatesAllOfCertificates{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSslCertificatesAllOfCertificates)

	if err != nil {
		return err
	}

	*o = SslCertificatesAllOfCertificates(varSslCertificatesAllOfCertificates)

	return err
}

type NullableSslCertificatesAllOfCertificates struct {
	value *SslCertificatesAllOfCertificates
	isSet bool
}

func (v NullableSslCertificatesAllOfCertificates) Get() *SslCertificatesAllOfCertificates {
	return v.value
}

func (v *NullableSslCertificatesAllOfCertificates) Set(val *SslCertificatesAllOfCertificates) {
	v.value = val
	v.isSet = true
}

func (v NullableSslCertificatesAllOfCertificates) IsSet() bool {
	return v.isSet
}

func (v *NullableSslCertificatesAllOfCertificates) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSslCertificatesAllOfCertificates(val *SslCertificatesAllOfCertificates) *NullableSslCertificatesAllOfCertificates {
	return &NullableSslCertificatesAllOfCertificates{value: val, isSet: true}
}

func (v NullableSslCertificatesAllOfCertificates) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSslCertificatesAllOfCertificates) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


