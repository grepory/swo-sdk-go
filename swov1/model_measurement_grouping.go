/*
SolarWinds Observability REST API

[Rest API Documentation](https://documentation.solarwinds.com/en/success_center/observability/content/api/api-swagger.htm)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package swov1

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the MeasurementGrouping type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MeasurementGrouping{}

// MeasurementGrouping struct for MeasurementGrouping
type MeasurementGrouping struct {
	Attributes []Attribute `json:"attributes,omitempty"`
	Measurements []Measurement `json:"measurements"`
}

type _MeasurementGrouping MeasurementGrouping

// NewMeasurementGrouping instantiates a new MeasurementGrouping object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMeasurementGrouping(measurements []Measurement) *MeasurementGrouping {
	this := MeasurementGrouping{}
	this.Measurements = measurements
	return &this
}

// NewMeasurementGroupingWithDefaults instantiates a new MeasurementGrouping object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMeasurementGroupingWithDefaults() *MeasurementGrouping {
	this := MeasurementGrouping{}
	return &this
}

// GetAttributes returns the Attributes field value if set, zero value otherwise.
func (o *MeasurementGrouping) GetAttributes() []Attribute {
	if o == nil || IsNil(o.Attributes) {
		var ret []Attribute
		return ret
	}
	return o.Attributes
}

// GetAttributesOk returns a tuple with the Attributes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MeasurementGrouping) GetAttributesOk() ([]Attribute, bool) {
	if o == nil || IsNil(o.Attributes) {
		return nil, false
	}
	return o.Attributes, true
}

// HasAttributes returns a boolean if a field has been set.
func (o *MeasurementGrouping) HasAttributes() bool {
	if o != nil && !IsNil(o.Attributes) {
		return true
	}

	return false
}

// SetAttributes gets a reference to the given []Attribute and assigns it to the Attributes field.
func (o *MeasurementGrouping) SetAttributes(v []Attribute) {
	o.Attributes = v
}

// GetMeasurements returns the Measurements field value
func (o *MeasurementGrouping) GetMeasurements() []Measurement {
	if o == nil {
		var ret []Measurement
		return ret
	}

	return o.Measurements
}

// GetMeasurementsOk returns a tuple with the Measurements field value
// and a boolean to check if the value has been set.
func (o *MeasurementGrouping) GetMeasurementsOk() ([]Measurement, bool) {
	if o == nil {
		return nil, false
	}
	return o.Measurements, true
}

// SetMeasurements sets field value
func (o *MeasurementGrouping) SetMeasurements(v []Measurement) {
	o.Measurements = v
}

func (o MeasurementGrouping) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MeasurementGrouping) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Attributes) {
		toSerialize["attributes"] = o.Attributes
	}
	toSerialize["measurements"] = o.Measurements
	return toSerialize, nil
}

func (o *MeasurementGrouping) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"measurements",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varMeasurementGrouping := _MeasurementGrouping{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varMeasurementGrouping)

	if err != nil {
		return err
	}

	*o = MeasurementGrouping(varMeasurementGrouping)

	return err
}

type NullableMeasurementGrouping struct {
	value *MeasurementGrouping
	isSet bool
}

func (v NullableMeasurementGrouping) Get() *MeasurementGrouping {
	return v.value
}

func (v *NullableMeasurementGrouping) Set(val *MeasurementGrouping) {
	v.value = val
	v.isSet = true
}

func (v NullableMeasurementGrouping) IsSet() bool {
	return v.isSet
}

func (v *NullableMeasurementGrouping) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMeasurementGrouping(val *MeasurementGrouping) *NullableMeasurementGrouping {
	return &NullableMeasurementGrouping{value: val, isSet: true}
}

func (v NullableMeasurementGrouping) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMeasurementGrouping) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


