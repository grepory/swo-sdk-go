/*
SolarWinds Observability REST API

[Rest API Documentation](https://documentation.solarwinds.com/en/success_center/observability/content/api/api-swagger.htm)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package swov1

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the AnalysisSchemaAllOfConnection type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AnalysisSchemaAllOfConnection{}

// AnalysisSchemaAllOfConnection struct for AnalysisSchemaAllOfConnection
type AnalysisSchemaAllOfConnection struct {
	DurationInMs int32 `json:"durationInMs"`
	ErrorMessage *string `json:"errorMessage,omitempty"`
	IpAddress *string `json:"ipAddress,omitempty"`
	Port *int32 `json:"port,omitempty"`
	Protocol *string `json:"protocol,omitempty"`
}

type _AnalysisSchemaAllOfConnection AnalysisSchemaAllOfConnection

// NewAnalysisSchemaAllOfConnection instantiates a new AnalysisSchemaAllOfConnection object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAnalysisSchemaAllOfConnection(durationInMs int32) *AnalysisSchemaAllOfConnection {
	this := AnalysisSchemaAllOfConnection{}
	this.DurationInMs = durationInMs
	return &this
}

// NewAnalysisSchemaAllOfConnectionWithDefaults instantiates a new AnalysisSchemaAllOfConnection object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAnalysisSchemaAllOfConnectionWithDefaults() *AnalysisSchemaAllOfConnection {
	this := AnalysisSchemaAllOfConnection{}
	return &this
}

// GetDurationInMs returns the DurationInMs field value
func (o *AnalysisSchemaAllOfConnection) GetDurationInMs() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.DurationInMs
}

// GetDurationInMsOk returns a tuple with the DurationInMs field value
// and a boolean to check if the value has been set.
func (o *AnalysisSchemaAllOfConnection) GetDurationInMsOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DurationInMs, true
}

// SetDurationInMs sets field value
func (o *AnalysisSchemaAllOfConnection) SetDurationInMs(v int32) {
	o.DurationInMs = v
}

// GetErrorMessage returns the ErrorMessage field value if set, zero value otherwise.
func (o *AnalysisSchemaAllOfConnection) GetErrorMessage() string {
	if o == nil || IsNil(o.ErrorMessage) {
		var ret string
		return ret
	}
	return *o.ErrorMessage
}

// GetErrorMessageOk returns a tuple with the ErrorMessage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AnalysisSchemaAllOfConnection) GetErrorMessageOk() (*string, bool) {
	if o == nil || IsNil(o.ErrorMessage) {
		return nil, false
	}
	return o.ErrorMessage, true
}

// HasErrorMessage returns a boolean if a field has been set.
func (o *AnalysisSchemaAllOfConnection) HasErrorMessage() bool {
	if o != nil && !IsNil(o.ErrorMessage) {
		return true
	}

	return false
}

// SetErrorMessage gets a reference to the given string and assigns it to the ErrorMessage field.
func (o *AnalysisSchemaAllOfConnection) SetErrorMessage(v string) {
	o.ErrorMessage = &v
}

// GetIpAddress returns the IpAddress field value if set, zero value otherwise.
func (o *AnalysisSchemaAllOfConnection) GetIpAddress() string {
	if o == nil || IsNil(o.IpAddress) {
		var ret string
		return ret
	}
	return *o.IpAddress
}

// GetIpAddressOk returns a tuple with the IpAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AnalysisSchemaAllOfConnection) GetIpAddressOk() (*string, bool) {
	if o == nil || IsNil(o.IpAddress) {
		return nil, false
	}
	return o.IpAddress, true
}

// HasIpAddress returns a boolean if a field has been set.
func (o *AnalysisSchemaAllOfConnection) HasIpAddress() bool {
	if o != nil && !IsNil(o.IpAddress) {
		return true
	}

	return false
}

// SetIpAddress gets a reference to the given string and assigns it to the IpAddress field.
func (o *AnalysisSchemaAllOfConnection) SetIpAddress(v string) {
	o.IpAddress = &v
}

// GetPort returns the Port field value if set, zero value otherwise.
func (o *AnalysisSchemaAllOfConnection) GetPort() int32 {
	if o == nil || IsNil(o.Port) {
		var ret int32
		return ret
	}
	return *o.Port
}

// GetPortOk returns a tuple with the Port field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AnalysisSchemaAllOfConnection) GetPortOk() (*int32, bool) {
	if o == nil || IsNil(o.Port) {
		return nil, false
	}
	return o.Port, true
}

// HasPort returns a boolean if a field has been set.
func (o *AnalysisSchemaAllOfConnection) HasPort() bool {
	if o != nil && !IsNil(o.Port) {
		return true
	}

	return false
}

// SetPort gets a reference to the given int32 and assigns it to the Port field.
func (o *AnalysisSchemaAllOfConnection) SetPort(v int32) {
	o.Port = &v
}

// GetProtocol returns the Protocol field value if set, zero value otherwise.
func (o *AnalysisSchemaAllOfConnection) GetProtocol() string {
	if o == nil || IsNil(o.Protocol) {
		var ret string
		return ret
	}
	return *o.Protocol
}

// GetProtocolOk returns a tuple with the Protocol field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AnalysisSchemaAllOfConnection) GetProtocolOk() (*string, bool) {
	if o == nil || IsNil(o.Protocol) {
		return nil, false
	}
	return o.Protocol, true
}

// HasProtocol returns a boolean if a field has been set.
func (o *AnalysisSchemaAllOfConnection) HasProtocol() bool {
	if o != nil && !IsNil(o.Protocol) {
		return true
	}

	return false
}

// SetProtocol gets a reference to the given string and assigns it to the Protocol field.
func (o *AnalysisSchemaAllOfConnection) SetProtocol(v string) {
	o.Protocol = &v
}

func (o AnalysisSchemaAllOfConnection) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AnalysisSchemaAllOfConnection) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["durationInMs"] = o.DurationInMs
	if !IsNil(o.ErrorMessage) {
		toSerialize["errorMessage"] = o.ErrorMessage
	}
	if !IsNil(o.IpAddress) {
		toSerialize["ipAddress"] = o.IpAddress
	}
	if !IsNil(o.Port) {
		toSerialize["port"] = o.Port
	}
	if !IsNil(o.Protocol) {
		toSerialize["protocol"] = o.Protocol
	}
	return toSerialize, nil
}

func (o *AnalysisSchemaAllOfConnection) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"durationInMs",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAnalysisSchemaAllOfConnection := _AnalysisSchemaAllOfConnection{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varAnalysisSchemaAllOfConnection)

	if err != nil {
		return err
	}

	*o = AnalysisSchemaAllOfConnection(varAnalysisSchemaAllOfConnection)

	return err
}

type NullableAnalysisSchemaAllOfConnection struct {
	value *AnalysisSchemaAllOfConnection
	isSet bool
}

func (v NullableAnalysisSchemaAllOfConnection) Get() *AnalysisSchemaAllOfConnection {
	return v.value
}

func (v *NullableAnalysisSchemaAllOfConnection) Set(val *AnalysisSchemaAllOfConnection) {
	v.value = val
	v.isSet = true
}

func (v NullableAnalysisSchemaAllOfConnection) IsSet() bool {
	return v.isSet
}

func (v *NullableAnalysisSchemaAllOfConnection) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAnalysisSchemaAllOfConnection(val *AnalysisSchemaAllOfConnection) *NullableAnalysisSchemaAllOfConnection {
	return &NullableAnalysisSchemaAllOfConnection{value: val, isSet: true}
}

func (v NullableAnalysisSchemaAllOfConnection) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAnalysisSchemaAllOfConnection) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


