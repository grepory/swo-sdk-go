/*
SolarWinds Observability REST API

[Rest API Documentation](https://documentation.solarwinds.com/en/success_center/observability/content/api/api-swagger.htm)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package swov1

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
)


// LogsArchivesAPIService LogsArchivesAPI service
type LogsArchivesAPIService service

type ApiGetLogArchivesRequest struct {
	ctx context.Context
	ApiService *LogsArchivesAPIService
	startTime *string
	endTime *string
	pageSize *int32
	skipToken *string
}

// Time must be within 1 year from the current date. &lt;br&gt;&lt;br&gt; ISO 8601 standard &lt;br&gt; Format: &lt;i&gt;yyyy-MM-ddTHH:mm:ssZ&lt;/i&gt;
func (r ApiGetLogArchivesRequest) StartTime(startTime string) ApiGetLogArchivesRequest {
	r.startTime = &startTime
	return r
}

// Time must be within 1 year from the current date. &lt;br&gt;&lt;br&gt; ISO 8601 standard &lt;br&gt; Format: &lt;i&gt;yyyy-MM-ddTHH:mm:ssZ&lt;/i&gt;
func (r ApiGetLogArchivesRequest) EndTime(endTime string) ApiGetLogArchivesRequest {
	r.endTime = &endTime
	return r
}

// Maximum number of records to be fetched per request
func (r ApiGetLogArchivesRequest) PageSize(pageSize int32) ApiGetLogArchivesRequest {
	r.pageSize = &pageSize
	return r
}

// For opaque pagination
func (r ApiGetLogArchivesRequest) SkipToken(skipToken string) ApiGetLogArchivesRequest {
	r.skipToken = &skipToken
	return r
}

func (r ApiGetLogArchivesRequest) Execute() (*LogArchiveResponse, *http.Response, error) {
	return r.ApiService.GetLogArchivesExecute(r)
}

/*
GetLogArchives Retrieve data on archived logs

Retrieve data on logs archived between a start and end time

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetLogArchivesRequest
*/
func (a *LogsArchivesAPIService) GetLogArchives(ctx context.Context) ApiGetLogArchivesRequest {
	return ApiGetLogArchivesRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return LogArchiveResponse
func (a *LogsArchivesAPIService) GetLogArchivesExecute(r ApiGetLogArchivesRequest) (*LogArchiveResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *LogArchiveResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "LogsArchivesAPIService.GetLogArchives")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/logs/archives"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.startTime == nil {
		return localVarReturnValue, nil, reportError("startTime is required and must be specified")
	}
	if r.endTime == nil {
		return localVarReturnValue, nil, reportError("endTime is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "startTime", r.startTime, "")
	parameterAddToHeaderOrQuery(localVarQueryParams, "endTime", r.endTime, "")
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "")
	} else {
		var defaultValue int32 = 1000
		r.pageSize = &defaultValue
	}
	if r.skipToken != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "skipToken", r.skipToken, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
