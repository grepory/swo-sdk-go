/*
SolarWinds Observability REST API

[Rest API Documentation](https://documentation.solarwinds.com/en/success_center/observability/content/api/api-swagger.htm)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package swov1

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the WebsiteSchemaAvailabilityCheckSettings type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &WebsiteSchemaAvailabilityCheckSettings{}

// WebsiteSchemaAvailabilityCheckSettings Use this field to configure availability tests for the website.  You are required to configure at least availability monitoring or real user monitoring to be able to create website. 
type WebsiteSchemaAvailabilityCheckSettings struct {
	CheckForString NullableCheckForStringType `json:"checkForString,omitempty"`
	// Configure how often availability tests should be performed.  Provide a number of seconds that is divisible by 60 and no greater than 14400 (4 hours). 
	TestIntervalInSeconds int32 `json:"testIntervalInSeconds"`
	// Configure which protocols need availability tests to be performed.  At least one protocol must be provided. 
	Protocols []WebsiteProtocol `json:"protocols"`
	PlatformOptions *ProbePlatformOptions `json:"platformOptions,omitempty"`
	TestFrom TestFrom `json:"testFrom"`
	Ssl NullableSslMonitoring `json:"ssl,omitempty"`
	// Configure custom request headers to be sent with each availability test. It is possible to provide multiple headers with the same name.  If omitted, set to null or set to an empty array, no custom headers will be sent. 
	CustomHeaders []CustomHeadersInner `json:"customHeaders,omitempty"`
	// Allow insecure SSL renegotiation which introduces a security risk in the communication process.  Checking this option could lead to exposing to unauthorized entities and possibility of unauthorized access, interception, or manipulation of sensitive data, compromising the integrity and security of the communication channel.  Available only with HTTPS check.  If omitted or set to null, insecure SSL renegotiation won't be allowed. 
	AllowInsecureRenegotiation *bool `json:"allowInsecureRenegotiation,omitempty"`
}

type _WebsiteSchemaAvailabilityCheckSettings WebsiteSchemaAvailabilityCheckSettings

// NewWebsiteSchemaAvailabilityCheckSettings instantiates a new WebsiteSchemaAvailabilityCheckSettings object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWebsiteSchemaAvailabilityCheckSettings(testIntervalInSeconds int32, protocols []WebsiteProtocol, testFrom TestFrom) *WebsiteSchemaAvailabilityCheckSettings {
	this := WebsiteSchemaAvailabilityCheckSettings{}
	this.TestIntervalInSeconds = testIntervalInSeconds
	this.Protocols = protocols
	this.TestFrom = testFrom
	return &this
}

// NewWebsiteSchemaAvailabilityCheckSettingsWithDefaults instantiates a new WebsiteSchemaAvailabilityCheckSettings object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWebsiteSchemaAvailabilityCheckSettingsWithDefaults() *WebsiteSchemaAvailabilityCheckSettings {
	this := WebsiteSchemaAvailabilityCheckSettings{}
	return &this
}

// GetCheckForString returns the CheckForString field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *WebsiteSchemaAvailabilityCheckSettings) GetCheckForString() CheckForStringType {
	if o == nil || IsNil(o.CheckForString.Get()) {
		var ret CheckForStringType
		return ret
	}
	return *o.CheckForString.Get()
}

// GetCheckForStringOk returns a tuple with the CheckForString field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *WebsiteSchemaAvailabilityCheckSettings) GetCheckForStringOk() (*CheckForStringType, bool) {
	if o == nil {
		return nil, false
	}
	return o.CheckForString.Get(), o.CheckForString.IsSet()
}

// HasCheckForString returns a boolean if a field has been set.
func (o *WebsiteSchemaAvailabilityCheckSettings) HasCheckForString() bool {
	if o != nil && o.CheckForString.IsSet() {
		return true
	}

	return false
}

// SetCheckForString gets a reference to the given NullableCheckForStringType and assigns it to the CheckForString field.
func (o *WebsiteSchemaAvailabilityCheckSettings) SetCheckForString(v CheckForStringType) {
	o.CheckForString.Set(&v)
}
// SetCheckForStringNil sets the value for CheckForString to be an explicit nil
func (o *WebsiteSchemaAvailabilityCheckSettings) SetCheckForStringNil() {
	o.CheckForString.Set(nil)
}

// UnsetCheckForString ensures that no value is present for CheckForString, not even an explicit nil
func (o *WebsiteSchemaAvailabilityCheckSettings) UnsetCheckForString() {
	o.CheckForString.Unset()
}

// GetTestIntervalInSeconds returns the TestIntervalInSeconds field value
func (o *WebsiteSchemaAvailabilityCheckSettings) GetTestIntervalInSeconds() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.TestIntervalInSeconds
}

// GetTestIntervalInSecondsOk returns a tuple with the TestIntervalInSeconds field value
// and a boolean to check if the value has been set.
func (o *WebsiteSchemaAvailabilityCheckSettings) GetTestIntervalInSecondsOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TestIntervalInSeconds, true
}

// SetTestIntervalInSeconds sets field value
func (o *WebsiteSchemaAvailabilityCheckSettings) SetTestIntervalInSeconds(v int32) {
	o.TestIntervalInSeconds = v
}

// GetProtocols returns the Protocols field value
func (o *WebsiteSchemaAvailabilityCheckSettings) GetProtocols() []WebsiteProtocol {
	if o == nil {
		var ret []WebsiteProtocol
		return ret
	}

	return o.Protocols
}

// GetProtocolsOk returns a tuple with the Protocols field value
// and a boolean to check if the value has been set.
func (o *WebsiteSchemaAvailabilityCheckSettings) GetProtocolsOk() ([]WebsiteProtocol, bool) {
	if o == nil {
		return nil, false
	}
	return o.Protocols, true
}

// SetProtocols sets field value
func (o *WebsiteSchemaAvailabilityCheckSettings) SetProtocols(v []WebsiteProtocol) {
	o.Protocols = v
}

// GetPlatformOptions returns the PlatformOptions field value if set, zero value otherwise.
func (o *WebsiteSchemaAvailabilityCheckSettings) GetPlatformOptions() ProbePlatformOptions {
	if o == nil || IsNil(o.PlatformOptions) {
		var ret ProbePlatformOptions
		return ret
	}
	return *o.PlatformOptions
}

// GetPlatformOptionsOk returns a tuple with the PlatformOptions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WebsiteSchemaAvailabilityCheckSettings) GetPlatformOptionsOk() (*ProbePlatformOptions, bool) {
	if o == nil || IsNil(o.PlatformOptions) {
		return nil, false
	}
	return o.PlatformOptions, true
}

// HasPlatformOptions returns a boolean if a field has been set.
func (o *WebsiteSchemaAvailabilityCheckSettings) HasPlatformOptions() bool {
	if o != nil && !IsNil(o.PlatformOptions) {
		return true
	}

	return false
}

// SetPlatformOptions gets a reference to the given ProbePlatformOptions and assigns it to the PlatformOptions field.
func (o *WebsiteSchemaAvailabilityCheckSettings) SetPlatformOptions(v ProbePlatformOptions) {
	o.PlatformOptions = &v
}

// GetTestFrom returns the TestFrom field value
func (o *WebsiteSchemaAvailabilityCheckSettings) GetTestFrom() TestFrom {
	if o == nil {
		var ret TestFrom
		return ret
	}

	return o.TestFrom
}

// GetTestFromOk returns a tuple with the TestFrom field value
// and a boolean to check if the value has been set.
func (o *WebsiteSchemaAvailabilityCheckSettings) GetTestFromOk() (*TestFrom, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TestFrom, true
}

// SetTestFrom sets field value
func (o *WebsiteSchemaAvailabilityCheckSettings) SetTestFrom(v TestFrom) {
	o.TestFrom = v
}

// GetSsl returns the Ssl field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *WebsiteSchemaAvailabilityCheckSettings) GetSsl() SslMonitoring {
	if o == nil || IsNil(o.Ssl.Get()) {
		var ret SslMonitoring
		return ret
	}
	return *o.Ssl.Get()
}

// GetSslOk returns a tuple with the Ssl field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *WebsiteSchemaAvailabilityCheckSettings) GetSslOk() (*SslMonitoring, bool) {
	if o == nil {
		return nil, false
	}
	return o.Ssl.Get(), o.Ssl.IsSet()
}

// HasSsl returns a boolean if a field has been set.
func (o *WebsiteSchemaAvailabilityCheckSettings) HasSsl() bool {
	if o != nil && o.Ssl.IsSet() {
		return true
	}

	return false
}

// SetSsl gets a reference to the given NullableSslMonitoring and assigns it to the Ssl field.
func (o *WebsiteSchemaAvailabilityCheckSettings) SetSsl(v SslMonitoring) {
	o.Ssl.Set(&v)
}
// SetSslNil sets the value for Ssl to be an explicit nil
func (o *WebsiteSchemaAvailabilityCheckSettings) SetSslNil() {
	o.Ssl.Set(nil)
}

// UnsetSsl ensures that no value is present for Ssl, not even an explicit nil
func (o *WebsiteSchemaAvailabilityCheckSettings) UnsetSsl() {
	o.Ssl.Unset()
}

// GetCustomHeaders returns the CustomHeaders field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *WebsiteSchemaAvailabilityCheckSettings) GetCustomHeaders() []CustomHeadersInner {
	if o == nil {
		var ret []CustomHeadersInner
		return ret
	}
	return o.CustomHeaders
}

// GetCustomHeadersOk returns a tuple with the CustomHeaders field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *WebsiteSchemaAvailabilityCheckSettings) GetCustomHeadersOk() ([]CustomHeadersInner, bool) {
	if o == nil || IsNil(o.CustomHeaders) {
		return nil, false
	}
	return o.CustomHeaders, true
}

// HasCustomHeaders returns a boolean if a field has been set.
func (o *WebsiteSchemaAvailabilityCheckSettings) HasCustomHeaders() bool {
	if o != nil && !IsNil(o.CustomHeaders) {
		return true
	}

	return false
}

// SetCustomHeaders gets a reference to the given []CustomHeadersInner and assigns it to the CustomHeaders field.
func (o *WebsiteSchemaAvailabilityCheckSettings) SetCustomHeaders(v []CustomHeadersInner) {
	o.CustomHeaders = v
}

// GetAllowInsecureRenegotiation returns the AllowInsecureRenegotiation field value if set, zero value otherwise.
func (o *WebsiteSchemaAvailabilityCheckSettings) GetAllowInsecureRenegotiation() bool {
	if o == nil || IsNil(o.AllowInsecureRenegotiation) {
		var ret bool
		return ret
	}
	return *o.AllowInsecureRenegotiation
}

// GetAllowInsecureRenegotiationOk returns a tuple with the AllowInsecureRenegotiation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WebsiteSchemaAvailabilityCheckSettings) GetAllowInsecureRenegotiationOk() (*bool, bool) {
	if o == nil || IsNil(o.AllowInsecureRenegotiation) {
		return nil, false
	}
	return o.AllowInsecureRenegotiation, true
}

// HasAllowInsecureRenegotiation returns a boolean if a field has been set.
func (o *WebsiteSchemaAvailabilityCheckSettings) HasAllowInsecureRenegotiation() bool {
	if o != nil && !IsNil(o.AllowInsecureRenegotiation) {
		return true
	}

	return false
}

// SetAllowInsecureRenegotiation gets a reference to the given bool and assigns it to the AllowInsecureRenegotiation field.
func (o *WebsiteSchemaAvailabilityCheckSettings) SetAllowInsecureRenegotiation(v bool) {
	o.AllowInsecureRenegotiation = &v
}

func (o WebsiteSchemaAvailabilityCheckSettings) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o WebsiteSchemaAvailabilityCheckSettings) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.CheckForString.IsSet() {
		toSerialize["checkForString"] = o.CheckForString.Get()
	}
	toSerialize["testIntervalInSeconds"] = o.TestIntervalInSeconds
	toSerialize["protocols"] = o.Protocols
	if !IsNil(o.PlatformOptions) {
		toSerialize["platformOptions"] = o.PlatformOptions
	}
	toSerialize["testFrom"] = o.TestFrom
	if o.Ssl.IsSet() {
		toSerialize["ssl"] = o.Ssl.Get()
	}
	if o.CustomHeaders != nil {
		toSerialize["customHeaders"] = o.CustomHeaders
	}
	if !IsNil(o.AllowInsecureRenegotiation) {
		toSerialize["allowInsecureRenegotiation"] = o.AllowInsecureRenegotiation
	}
	return toSerialize, nil
}

func (o *WebsiteSchemaAvailabilityCheckSettings) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"testIntervalInSeconds",
		"protocols",
		"testFrom",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varWebsiteSchemaAvailabilityCheckSettings := _WebsiteSchemaAvailabilityCheckSettings{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varWebsiteSchemaAvailabilityCheckSettings)

	if err != nil {
		return err
	}

	*o = WebsiteSchemaAvailabilityCheckSettings(varWebsiteSchemaAvailabilityCheckSettings)

	return err
}

type NullableWebsiteSchemaAvailabilityCheckSettings struct {
	value *WebsiteSchemaAvailabilityCheckSettings
	isSet bool
}

func (v NullableWebsiteSchemaAvailabilityCheckSettings) Get() *WebsiteSchemaAvailabilityCheckSettings {
	return v.value
}

func (v *NullableWebsiteSchemaAvailabilityCheckSettings) Set(val *WebsiteSchemaAvailabilityCheckSettings) {
	v.value = val
	v.isSet = true
}

func (v NullableWebsiteSchemaAvailabilityCheckSettings) IsSet() bool {
	return v.isSet
}

func (v *NullableWebsiteSchemaAvailabilityCheckSettings) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWebsiteSchemaAvailabilityCheckSettings(val *WebsiteSchemaAvailabilityCheckSettings) *NullableWebsiteSchemaAvailabilityCheckSettings {
	return &NullableWebsiteSchemaAvailabilityCheckSettings{value: val, isSet: true}
}

func (v NullableWebsiteSchemaAvailabilityCheckSettings) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWebsiteSchemaAvailabilityCheckSettings) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


