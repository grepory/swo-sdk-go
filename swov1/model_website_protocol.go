/*
SolarWinds Observability REST API

[Rest API Documentation](https://documentation.solarwinds.com/en/success_center/observability/content/api/api-swagger.htm)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package swov1

import (
	"encoding/json"
	"fmt"
)

// WebsiteProtocol Protocol to perform availability checks for.
type WebsiteProtocol string

// List of WebsiteProtocol
const (
	HTTP WebsiteProtocol = "HTTP"
	HTTPS WebsiteProtocol = "HTTPS"
)

// All allowed values of WebsiteProtocol enum
var AllowedWebsiteProtocolEnumValues = []WebsiteProtocol{
	"HTTP",
	"HTTPS",
}

func (v *WebsiteProtocol) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := WebsiteProtocol(value)
	for _, existing := range AllowedWebsiteProtocolEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid WebsiteProtocol", value)
}

// NewWebsiteProtocolFromValue returns a pointer to a valid WebsiteProtocol
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewWebsiteProtocolFromValue(v string) (*WebsiteProtocol, error) {
	ev := WebsiteProtocol(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for WebsiteProtocol: valid values are %v", v, AllowedWebsiteProtocolEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v WebsiteProtocol) IsValid() bool {
	for _, existing := range AllowedWebsiteProtocolEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to WebsiteProtocol value
func (v WebsiteProtocol) Ptr() *WebsiteProtocol {
	return &v
}

type NullableWebsiteProtocol struct {
	value *WebsiteProtocol
	isSet bool
}

func (v NullableWebsiteProtocol) Get() *WebsiteProtocol {
	return v.value
}

func (v *NullableWebsiteProtocol) Set(val *WebsiteProtocol) {
	v.value = val
	v.isSet = true
}

func (v NullableWebsiteProtocol) IsSet() bool {
	return v.isSet
}

func (v *NullableWebsiteProtocol) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWebsiteProtocol(val *WebsiteProtocol) *NullableWebsiteProtocol {
	return &NullableWebsiteProtocol{value: val, isSet: true}
}

func (v NullableWebsiteProtocol) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWebsiteProtocol) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

