/*
SolarWinds Observability REST API

[Rest API Documentation](https://documentation.solarwinds.com/en/success_center/observability/content/api/api-swagger.htm)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package swov1

import (
	"encoding/json"
)

// checks if the ValidationSchema type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ValidationSchema{}

// ValidationSchema struct for ValidationSchema
type ValidationSchema struct {
	SslCertificates *SslCertificates `json:"sslCertificates,omitempty"`
	CheckForString *CheckForString `json:"checkForString,omitempty"`
}

// NewValidationSchema instantiates a new ValidationSchema object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewValidationSchema() *ValidationSchema {
	this := ValidationSchema{}
	return &this
}

// NewValidationSchemaWithDefaults instantiates a new ValidationSchema object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewValidationSchemaWithDefaults() *ValidationSchema {
	this := ValidationSchema{}
	return &this
}

// GetSslCertificates returns the SslCertificates field value if set, zero value otherwise.
func (o *ValidationSchema) GetSslCertificates() SslCertificates {
	if o == nil || IsNil(o.SslCertificates) {
		var ret SslCertificates
		return ret
	}
	return *o.SslCertificates
}

// GetSslCertificatesOk returns a tuple with the SslCertificates field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ValidationSchema) GetSslCertificatesOk() (*SslCertificates, bool) {
	if o == nil || IsNil(o.SslCertificates) {
		return nil, false
	}
	return o.SslCertificates, true
}

// HasSslCertificates returns a boolean if a field has been set.
func (o *ValidationSchema) HasSslCertificates() bool {
	if o != nil && !IsNil(o.SslCertificates) {
		return true
	}

	return false
}

// SetSslCertificates gets a reference to the given SslCertificates and assigns it to the SslCertificates field.
func (o *ValidationSchema) SetSslCertificates(v SslCertificates) {
	o.SslCertificates = &v
}

// GetCheckForString returns the CheckForString field value if set, zero value otherwise.
func (o *ValidationSchema) GetCheckForString() CheckForString {
	if o == nil || IsNil(o.CheckForString) {
		var ret CheckForString
		return ret
	}
	return *o.CheckForString
}

// GetCheckForStringOk returns a tuple with the CheckForString field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ValidationSchema) GetCheckForStringOk() (*CheckForString, bool) {
	if o == nil || IsNil(o.CheckForString) {
		return nil, false
	}
	return o.CheckForString, true
}

// HasCheckForString returns a boolean if a field has been set.
func (o *ValidationSchema) HasCheckForString() bool {
	if o != nil && !IsNil(o.CheckForString) {
		return true
	}

	return false
}

// SetCheckForString gets a reference to the given CheckForString and assigns it to the CheckForString field.
func (o *ValidationSchema) SetCheckForString(v CheckForString) {
	o.CheckForString = &v
}

func (o ValidationSchema) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ValidationSchema) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.SslCertificates) {
		toSerialize["sslCertificates"] = o.SslCertificates
	}
	if !IsNil(o.CheckForString) {
		toSerialize["checkForString"] = o.CheckForString
	}
	return toSerialize, nil
}

type NullableValidationSchema struct {
	value *ValidationSchema
	isSet bool
}

func (v NullableValidationSchema) Get() *ValidationSchema {
	return v.value
}

func (v *NullableValidationSchema) Set(val *ValidationSchema) {
	v.value = val
	v.isSet = true
}

func (v NullableValidationSchema) IsSet() bool {
	return v.isSet
}

func (v *NullableValidationSchema) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableValidationSchema(val *ValidationSchema) *NullableValidationSchema {
	return &NullableValidationSchema{value: val, isSet: true}
}

func (v NullableValidationSchema) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableValidationSchema) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


