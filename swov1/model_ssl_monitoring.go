/*
SolarWinds Observability REST API

[Rest API Documentation](https://documentation.solarwinds.com/en/success_center/observability/content/api/api-swagger.htm)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package swov1

import (
	"encoding/json"
)

// checks if the SslMonitoring type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SslMonitoring{}

// SslMonitoring Configure monitoring of SSL/TLS certificates validity. This option is relevant for HTTPS protocol only.  If omitted or set to null, SSL monitoring will be disabled and its previous configuration discarded. 
type SslMonitoring struct {
	// Whether SSL monitoring is enabled for the website.  If set to false, SSL monitoring will be disabled, but the other settings will be remembered in case you re-enable it later.  If omitted, the previous setting will stay in effect. If there is no previous setting, the value will default to false. 
	Enabled NullableBool `json:"enabled,omitempty"`
	// Number of days before the expiration date an SSL certificate will be considered 'expiring.' 
	DaysPriorToExpiration NullableInt32 `json:"daysPriorToExpiration,omitempty"`
	// Use this option to limit the certificate expiration check to only the first certificate in the chain (normally the host certificate). This way you will not be warned about impending expiration of intermediate or root Certification Authority certificates in the chain.  This option does not affect any other certificate validity checks besides expiration.  If omitted, the previous setting will stay in effect. If there is no previous setting, the value will default to false. 
	IgnoreIntermediateCertificates NullableBool `json:"ignoreIntermediateCertificates,omitempty"`
}

// NewSslMonitoring instantiates a new SslMonitoring object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSslMonitoring() *SslMonitoring {
	this := SslMonitoring{}
	return &this
}

// NewSslMonitoringWithDefaults instantiates a new SslMonitoring object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSslMonitoringWithDefaults() *SslMonitoring {
	this := SslMonitoring{}
	return &this
}

// GetEnabled returns the Enabled field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SslMonitoring) GetEnabled() bool {
	if o == nil || IsNil(o.Enabled.Get()) {
		var ret bool
		return ret
	}
	return *o.Enabled.Get()
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SslMonitoring) GetEnabledOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.Enabled.Get(), o.Enabled.IsSet()
}

// HasEnabled returns a boolean if a field has been set.
func (o *SslMonitoring) HasEnabled() bool {
	if o != nil && o.Enabled.IsSet() {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given NullableBool and assigns it to the Enabled field.
func (o *SslMonitoring) SetEnabled(v bool) {
	o.Enabled.Set(&v)
}
// SetEnabledNil sets the value for Enabled to be an explicit nil
func (o *SslMonitoring) SetEnabledNil() {
	o.Enabled.Set(nil)
}

// UnsetEnabled ensures that no value is present for Enabled, not even an explicit nil
func (o *SslMonitoring) UnsetEnabled() {
	o.Enabled.Unset()
}

// GetDaysPriorToExpiration returns the DaysPriorToExpiration field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SslMonitoring) GetDaysPriorToExpiration() int32 {
	if o == nil || IsNil(o.DaysPriorToExpiration.Get()) {
		var ret int32
		return ret
	}
	return *o.DaysPriorToExpiration.Get()
}

// GetDaysPriorToExpirationOk returns a tuple with the DaysPriorToExpiration field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SslMonitoring) GetDaysPriorToExpirationOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.DaysPriorToExpiration.Get(), o.DaysPriorToExpiration.IsSet()
}

// HasDaysPriorToExpiration returns a boolean if a field has been set.
func (o *SslMonitoring) HasDaysPriorToExpiration() bool {
	if o != nil && o.DaysPriorToExpiration.IsSet() {
		return true
	}

	return false
}

// SetDaysPriorToExpiration gets a reference to the given NullableInt32 and assigns it to the DaysPriorToExpiration field.
func (o *SslMonitoring) SetDaysPriorToExpiration(v int32) {
	o.DaysPriorToExpiration.Set(&v)
}
// SetDaysPriorToExpirationNil sets the value for DaysPriorToExpiration to be an explicit nil
func (o *SslMonitoring) SetDaysPriorToExpirationNil() {
	o.DaysPriorToExpiration.Set(nil)
}

// UnsetDaysPriorToExpiration ensures that no value is present for DaysPriorToExpiration, not even an explicit nil
func (o *SslMonitoring) UnsetDaysPriorToExpiration() {
	o.DaysPriorToExpiration.Unset()
}

// GetIgnoreIntermediateCertificates returns the IgnoreIntermediateCertificates field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SslMonitoring) GetIgnoreIntermediateCertificates() bool {
	if o == nil || IsNil(o.IgnoreIntermediateCertificates.Get()) {
		var ret bool
		return ret
	}
	return *o.IgnoreIntermediateCertificates.Get()
}

// GetIgnoreIntermediateCertificatesOk returns a tuple with the IgnoreIntermediateCertificates field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SslMonitoring) GetIgnoreIntermediateCertificatesOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.IgnoreIntermediateCertificates.Get(), o.IgnoreIntermediateCertificates.IsSet()
}

// HasIgnoreIntermediateCertificates returns a boolean if a field has been set.
func (o *SslMonitoring) HasIgnoreIntermediateCertificates() bool {
	if o != nil && o.IgnoreIntermediateCertificates.IsSet() {
		return true
	}

	return false
}

// SetIgnoreIntermediateCertificates gets a reference to the given NullableBool and assigns it to the IgnoreIntermediateCertificates field.
func (o *SslMonitoring) SetIgnoreIntermediateCertificates(v bool) {
	o.IgnoreIntermediateCertificates.Set(&v)
}
// SetIgnoreIntermediateCertificatesNil sets the value for IgnoreIntermediateCertificates to be an explicit nil
func (o *SslMonitoring) SetIgnoreIntermediateCertificatesNil() {
	o.IgnoreIntermediateCertificates.Set(nil)
}

// UnsetIgnoreIntermediateCertificates ensures that no value is present for IgnoreIntermediateCertificates, not even an explicit nil
func (o *SslMonitoring) UnsetIgnoreIntermediateCertificates() {
	o.IgnoreIntermediateCertificates.Unset()
}

func (o SslMonitoring) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SslMonitoring) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Enabled.IsSet() {
		toSerialize["enabled"] = o.Enabled.Get()
	}
	if o.DaysPriorToExpiration.IsSet() {
		toSerialize["daysPriorToExpiration"] = o.DaysPriorToExpiration.Get()
	}
	if o.IgnoreIntermediateCertificates.IsSet() {
		toSerialize["ignoreIntermediateCertificates"] = o.IgnoreIntermediateCertificates.Get()
	}
	return toSerialize, nil
}

type NullableSslMonitoring struct {
	value *SslMonitoring
	isSet bool
}

func (v NullableSslMonitoring) Get() *SslMonitoring {
	return v.value
}

func (v *NullableSslMonitoring) Set(val *SslMonitoring) {
	v.value = val
	v.isSet = true
}

func (v NullableSslMonitoring) IsSet() bool {
	return v.isSet
}

func (v *NullableSslMonitoring) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSslMonitoring(val *SslMonitoring) *NullableSslMonitoring {
	return &NullableSslMonitoring{value: val, isSet: true}
}

func (v NullableSslMonitoring) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSslMonitoring) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


