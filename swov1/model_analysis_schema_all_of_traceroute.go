/*
SolarWinds Observability REST API

[Rest API Documentation](https://documentation.solarwinds.com/en/success_center/observability/content/api/api-swagger.htm)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package swov1

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the AnalysisSchemaAllOfTraceroute type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AnalysisSchemaAllOfTraceroute{}

// AnalysisSchemaAllOfTraceroute struct for AnalysisSchemaAllOfTraceroute
type AnalysisSchemaAllOfTraceroute struct {
	DurationInMs int32 `json:"durationInMs"`
	RawOutput string `json:"rawOutput"`
}

type _AnalysisSchemaAllOfTraceroute AnalysisSchemaAllOfTraceroute

// NewAnalysisSchemaAllOfTraceroute instantiates a new AnalysisSchemaAllOfTraceroute object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAnalysisSchemaAllOfTraceroute(durationInMs int32, rawOutput string) *AnalysisSchemaAllOfTraceroute {
	this := AnalysisSchemaAllOfTraceroute{}
	this.DurationInMs = durationInMs
	this.RawOutput = rawOutput
	return &this
}

// NewAnalysisSchemaAllOfTracerouteWithDefaults instantiates a new AnalysisSchemaAllOfTraceroute object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAnalysisSchemaAllOfTracerouteWithDefaults() *AnalysisSchemaAllOfTraceroute {
	this := AnalysisSchemaAllOfTraceroute{}
	return &this
}

// GetDurationInMs returns the DurationInMs field value
func (o *AnalysisSchemaAllOfTraceroute) GetDurationInMs() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.DurationInMs
}

// GetDurationInMsOk returns a tuple with the DurationInMs field value
// and a boolean to check if the value has been set.
func (o *AnalysisSchemaAllOfTraceroute) GetDurationInMsOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DurationInMs, true
}

// SetDurationInMs sets field value
func (o *AnalysisSchemaAllOfTraceroute) SetDurationInMs(v int32) {
	o.DurationInMs = v
}

// GetRawOutput returns the RawOutput field value
func (o *AnalysisSchemaAllOfTraceroute) GetRawOutput() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RawOutput
}

// GetRawOutputOk returns a tuple with the RawOutput field value
// and a boolean to check if the value has been set.
func (o *AnalysisSchemaAllOfTraceroute) GetRawOutputOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RawOutput, true
}

// SetRawOutput sets field value
func (o *AnalysisSchemaAllOfTraceroute) SetRawOutput(v string) {
	o.RawOutput = v
}

func (o AnalysisSchemaAllOfTraceroute) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AnalysisSchemaAllOfTraceroute) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["durationInMs"] = o.DurationInMs
	toSerialize["rawOutput"] = o.RawOutput
	return toSerialize, nil
}

func (o *AnalysisSchemaAllOfTraceroute) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"durationInMs",
		"rawOutput",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAnalysisSchemaAllOfTraceroute := _AnalysisSchemaAllOfTraceroute{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varAnalysisSchemaAllOfTraceroute)

	if err != nil {
		return err
	}

	*o = AnalysisSchemaAllOfTraceroute(varAnalysisSchemaAllOfTraceroute)

	return err
}

type NullableAnalysisSchemaAllOfTraceroute struct {
	value *AnalysisSchemaAllOfTraceroute
	isSet bool
}

func (v NullableAnalysisSchemaAllOfTraceroute) Get() *AnalysisSchemaAllOfTraceroute {
	return v.value
}

func (v *NullableAnalysisSchemaAllOfTraceroute) Set(val *AnalysisSchemaAllOfTraceroute) {
	v.value = val
	v.isSet = true
}

func (v NullableAnalysisSchemaAllOfTraceroute) IsSet() bool {
	return v.isSet
}

func (v *NullableAnalysisSchemaAllOfTraceroute) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAnalysisSchemaAllOfTraceroute(val *AnalysisSchemaAllOfTraceroute) *NullableAnalysisSchemaAllOfTraceroute {
	return &NullableAnalysisSchemaAllOfTraceroute{value: val, isSet: true}
}

func (v NullableAnalysisSchemaAllOfTraceroute) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAnalysisSchemaAllOfTraceroute) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


