/*
SolarWinds Observability REST API

[Rest API Documentation](https://documentation.solarwinds.com/en/success_center/observability/content/api/api-swagger.htm)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package swov1

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the RestLogEvent type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RestLogEvent{}

// RestLogEvent struct for RestLogEvent
type RestLogEvent struct {
	Id string `json:"id"`
	Time string `json:"time"`
	Message string `json:"message"`
	Hostname string `json:"hostname"`
	Severity string `json:"severity"`
	Program string `json:"program"`
}

type _RestLogEvent RestLogEvent

// NewRestLogEvent instantiates a new RestLogEvent object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRestLogEvent(id string, time string, message string, hostname string, severity string, program string) *RestLogEvent {
	this := RestLogEvent{}
	this.Id = id
	this.Time = time
	this.Message = message
	this.Hostname = hostname
	this.Severity = severity
	this.Program = program
	return &this
}

// NewRestLogEventWithDefaults instantiates a new RestLogEvent object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRestLogEventWithDefaults() *RestLogEvent {
	this := RestLogEvent{}
	return &this
}

// GetId returns the Id field value
func (o *RestLogEvent) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *RestLogEvent) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *RestLogEvent) SetId(v string) {
	o.Id = v
}

// GetTime returns the Time field value
func (o *RestLogEvent) GetTime() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Time
}

// GetTimeOk returns a tuple with the Time field value
// and a boolean to check if the value has been set.
func (o *RestLogEvent) GetTimeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Time, true
}

// SetTime sets field value
func (o *RestLogEvent) SetTime(v string) {
	o.Time = v
}

// GetMessage returns the Message field value
func (o *RestLogEvent) GetMessage() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Message
}

// GetMessageOk returns a tuple with the Message field value
// and a boolean to check if the value has been set.
func (o *RestLogEvent) GetMessageOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Message, true
}

// SetMessage sets field value
func (o *RestLogEvent) SetMessage(v string) {
	o.Message = v
}

// GetHostname returns the Hostname field value
func (o *RestLogEvent) GetHostname() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Hostname
}

// GetHostnameOk returns a tuple with the Hostname field value
// and a boolean to check if the value has been set.
func (o *RestLogEvent) GetHostnameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Hostname, true
}

// SetHostname sets field value
func (o *RestLogEvent) SetHostname(v string) {
	o.Hostname = v
}

// GetSeverity returns the Severity field value
func (o *RestLogEvent) GetSeverity() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Severity
}

// GetSeverityOk returns a tuple with the Severity field value
// and a boolean to check if the value has been set.
func (o *RestLogEvent) GetSeverityOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Severity, true
}

// SetSeverity sets field value
func (o *RestLogEvent) SetSeverity(v string) {
	o.Severity = v
}

// GetProgram returns the Program field value
func (o *RestLogEvent) GetProgram() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Program
}

// GetProgramOk returns a tuple with the Program field value
// and a boolean to check if the value has been set.
func (o *RestLogEvent) GetProgramOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Program, true
}

// SetProgram sets field value
func (o *RestLogEvent) SetProgram(v string) {
	o.Program = v
}

func (o RestLogEvent) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RestLogEvent) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["time"] = o.Time
	toSerialize["message"] = o.Message
	toSerialize["hostname"] = o.Hostname
	toSerialize["severity"] = o.Severity
	toSerialize["program"] = o.Program
	return toSerialize, nil
}

func (o *RestLogEvent) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"time",
		"message",
		"hostname",
		"severity",
		"program",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varRestLogEvent := _RestLogEvent{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varRestLogEvent)

	if err != nil {
		return err
	}

	*o = RestLogEvent(varRestLogEvent)

	return err
}

type NullableRestLogEvent struct {
	value *RestLogEvent
	isSet bool
}

func (v NullableRestLogEvent) Get() *RestLogEvent {
	return v.value
}

func (v *NullableRestLogEvent) Set(val *RestLogEvent) {
	v.value = val
	v.isSet = true
}

func (v NullableRestLogEvent) IsSet() bool {
	return v.isSet
}

func (v *NullableRestLogEvent) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRestLogEvent(val *RestLogEvent) *NullableRestLogEvent {
	return &NullableRestLogEvent{value: val, isSet: true}
}

func (v NullableRestLogEvent) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRestLogEvent) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


