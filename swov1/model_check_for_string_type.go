/*
SolarWinds Observability REST API

[Rest API Documentation](https://documentation.solarwinds.com/en/success_center/observability/content/api/api-swagger.htm)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package swov1

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CheckForStringType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CheckForStringType{}

// CheckForStringType Use this field to configure whether availability tests should check for presence or absence of a particular string on a page.  If the `operator` is DOES_NOT_CONTAIN and the `value` is found on the page, the availability test will fail.  Likewise, if the `operator` is CONTAINS and the `value` is not found on the page, the availability test will fail.  If omitted or set to null, the string checking functionality will be disabled. 
type CheckForStringType struct {
	// Defines whether the check should pass only when the string is present on the page (CONTAINS) or only when it is absent (DOES_NOT_CONTAIN). 
	Operator string `json:"operator"`
	// The string that which will be searched in the page source code.
	Value string `json:"value"`
}

type _CheckForStringType CheckForStringType

// NewCheckForStringType instantiates a new CheckForStringType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCheckForStringType(operator string, value string) *CheckForStringType {
	this := CheckForStringType{}
	this.Operator = operator
	this.Value = value
	return &this
}

// NewCheckForStringTypeWithDefaults instantiates a new CheckForStringType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCheckForStringTypeWithDefaults() *CheckForStringType {
	this := CheckForStringType{}
	return &this
}

// GetOperator returns the Operator field value
func (o *CheckForStringType) GetOperator() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Operator
}

// GetOperatorOk returns a tuple with the Operator field value
// and a boolean to check if the value has been set.
func (o *CheckForStringType) GetOperatorOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Operator, true
}

// SetOperator sets field value
func (o *CheckForStringType) SetOperator(v string) {
	o.Operator = v
}

// GetValue returns the Value field value
func (o *CheckForStringType) GetValue() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Value
}

// GetValueOk returns a tuple with the Value field value
// and a boolean to check if the value has been set.
func (o *CheckForStringType) GetValueOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Value, true
}

// SetValue sets field value
func (o *CheckForStringType) SetValue(v string) {
	o.Value = v
}

func (o CheckForStringType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CheckForStringType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["operator"] = o.Operator
	toSerialize["value"] = o.Value
	return toSerialize, nil
}

func (o *CheckForStringType) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"operator",
		"value",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCheckForStringType := _CheckForStringType{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCheckForStringType)

	if err != nil {
		return err
	}

	*o = CheckForStringType(varCheckForStringType)

	return err
}

type NullableCheckForStringType struct {
	value *CheckForStringType
	isSet bool
}

func (v NullableCheckForStringType) Get() *CheckForStringType {
	return v.value
}

func (v *NullableCheckForStringType) Set(val *CheckForStringType) {
	v.value = val
	v.isSet = true
}

func (v NullableCheckForStringType) IsSet() bool {
	return v.isSet
}

func (v *NullableCheckForStringType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCheckForStringType(val *CheckForStringType) *NullableCheckForStringType {
	return &NullableCheckForStringType{value: val, isSet: true}
}

func (v NullableCheckForStringType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCheckForStringType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


