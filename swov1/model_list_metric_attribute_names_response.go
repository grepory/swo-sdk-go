/*
SolarWinds Observability REST API

[Rest API Documentation](https://documentation.solarwinds.com/en/success_center/observability/content/api/api-swagger.htm)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package swov1

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ListMetricAttributeNamesResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ListMetricAttributeNamesResponse{}

// ListMetricAttributeNamesResponse struct for ListMetricAttributeNamesResponse
type ListMetricAttributeNamesResponse struct {
	Names []string `json:"names"`
	PageInfo *PageInfo `json:"pageInfo,omitempty"`
}

type _ListMetricAttributeNamesResponse ListMetricAttributeNamesResponse

// NewListMetricAttributeNamesResponse instantiates a new ListMetricAttributeNamesResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewListMetricAttributeNamesResponse(names []string) *ListMetricAttributeNamesResponse {
	this := ListMetricAttributeNamesResponse{}
	this.Names = names
	return &this
}

// NewListMetricAttributeNamesResponseWithDefaults instantiates a new ListMetricAttributeNamesResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewListMetricAttributeNamesResponseWithDefaults() *ListMetricAttributeNamesResponse {
	this := ListMetricAttributeNamesResponse{}
	return &this
}

// GetNames returns the Names field value
func (o *ListMetricAttributeNamesResponse) GetNames() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Names
}

// GetNamesOk returns a tuple with the Names field value
// and a boolean to check if the value has been set.
func (o *ListMetricAttributeNamesResponse) GetNamesOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Names, true
}

// SetNames sets field value
func (o *ListMetricAttributeNamesResponse) SetNames(v []string) {
	o.Names = v
}

// GetPageInfo returns the PageInfo field value if set, zero value otherwise.
func (o *ListMetricAttributeNamesResponse) GetPageInfo() PageInfo {
	if o == nil || IsNil(o.PageInfo) {
		var ret PageInfo
		return ret
	}
	return *o.PageInfo
}

// GetPageInfoOk returns a tuple with the PageInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListMetricAttributeNamesResponse) GetPageInfoOk() (*PageInfo, bool) {
	if o == nil || IsNil(o.PageInfo) {
		return nil, false
	}
	return o.PageInfo, true
}

// HasPageInfo returns a boolean if a field has been set.
func (o *ListMetricAttributeNamesResponse) HasPageInfo() bool {
	if o != nil && !IsNil(o.PageInfo) {
		return true
	}

	return false
}

// SetPageInfo gets a reference to the given PageInfo and assigns it to the PageInfo field.
func (o *ListMetricAttributeNamesResponse) SetPageInfo(v PageInfo) {
	o.PageInfo = &v
}

func (o ListMetricAttributeNamesResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ListMetricAttributeNamesResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["names"] = o.Names
	if !IsNil(o.PageInfo) {
		toSerialize["pageInfo"] = o.PageInfo
	}
	return toSerialize, nil
}

func (o *ListMetricAttributeNamesResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"names",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varListMetricAttributeNamesResponse := _ListMetricAttributeNamesResponse{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varListMetricAttributeNamesResponse)

	if err != nil {
		return err
	}

	*o = ListMetricAttributeNamesResponse(varListMetricAttributeNamesResponse)

	return err
}

type NullableListMetricAttributeNamesResponse struct {
	value *ListMetricAttributeNamesResponse
	isSet bool
}

func (v NullableListMetricAttributeNamesResponse) Get() *ListMetricAttributeNamesResponse {
	return v.value
}

func (v *NullableListMetricAttributeNamesResponse) Set(val *ListMetricAttributeNamesResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableListMetricAttributeNamesResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableListMetricAttributeNamesResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListMetricAttributeNamesResponse(val *ListMetricAttributeNamesResponse) *NullableListMetricAttributeNamesResponse {
	return &NullableListMetricAttributeNamesResponse{value: val, isSet: true}
}

func (v NullableListMetricAttributeNamesResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListMetricAttributeNamesResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


