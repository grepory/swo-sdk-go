/*
SolarWinds Observability REST API

[Rest API Documentation](https://documentation.solarwinds.com/en/success_center/observability/content/api/api-swagger.htm)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package swov1

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the AnalysisSchemaAllOfResolveIp type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AnalysisSchemaAllOfResolveIp{}

// AnalysisSchemaAllOfResolveIp struct for AnalysisSchemaAllOfResolveIp
type AnalysisSchemaAllOfResolveIp struct {
	DurationInMs int32 `json:"durationInMs"`
	ErrorMessage *string `json:"errorMessage,omitempty"`
	Hostname *string `json:"hostname,omitempty"`
	ResolvedIp string `json:"resolvedIp"`
}

type _AnalysisSchemaAllOfResolveIp AnalysisSchemaAllOfResolveIp

// NewAnalysisSchemaAllOfResolveIp instantiates a new AnalysisSchemaAllOfResolveIp object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAnalysisSchemaAllOfResolveIp(durationInMs int32, resolvedIp string) *AnalysisSchemaAllOfResolveIp {
	this := AnalysisSchemaAllOfResolveIp{}
	this.DurationInMs = durationInMs
	this.ResolvedIp = resolvedIp
	return &this
}

// NewAnalysisSchemaAllOfResolveIpWithDefaults instantiates a new AnalysisSchemaAllOfResolveIp object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAnalysisSchemaAllOfResolveIpWithDefaults() *AnalysisSchemaAllOfResolveIp {
	this := AnalysisSchemaAllOfResolveIp{}
	return &this
}

// GetDurationInMs returns the DurationInMs field value
func (o *AnalysisSchemaAllOfResolveIp) GetDurationInMs() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.DurationInMs
}

// GetDurationInMsOk returns a tuple with the DurationInMs field value
// and a boolean to check if the value has been set.
func (o *AnalysisSchemaAllOfResolveIp) GetDurationInMsOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DurationInMs, true
}

// SetDurationInMs sets field value
func (o *AnalysisSchemaAllOfResolveIp) SetDurationInMs(v int32) {
	o.DurationInMs = v
}

// GetErrorMessage returns the ErrorMessage field value if set, zero value otherwise.
func (o *AnalysisSchemaAllOfResolveIp) GetErrorMessage() string {
	if o == nil || IsNil(o.ErrorMessage) {
		var ret string
		return ret
	}
	return *o.ErrorMessage
}

// GetErrorMessageOk returns a tuple with the ErrorMessage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AnalysisSchemaAllOfResolveIp) GetErrorMessageOk() (*string, bool) {
	if o == nil || IsNil(o.ErrorMessage) {
		return nil, false
	}
	return o.ErrorMessage, true
}

// HasErrorMessage returns a boolean if a field has been set.
func (o *AnalysisSchemaAllOfResolveIp) HasErrorMessage() bool {
	if o != nil && !IsNil(o.ErrorMessage) {
		return true
	}

	return false
}

// SetErrorMessage gets a reference to the given string and assigns it to the ErrorMessage field.
func (o *AnalysisSchemaAllOfResolveIp) SetErrorMessage(v string) {
	o.ErrorMessage = &v
}

// GetHostname returns the Hostname field value if set, zero value otherwise.
func (o *AnalysisSchemaAllOfResolveIp) GetHostname() string {
	if o == nil || IsNil(o.Hostname) {
		var ret string
		return ret
	}
	return *o.Hostname
}

// GetHostnameOk returns a tuple with the Hostname field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AnalysisSchemaAllOfResolveIp) GetHostnameOk() (*string, bool) {
	if o == nil || IsNil(o.Hostname) {
		return nil, false
	}
	return o.Hostname, true
}

// HasHostname returns a boolean if a field has been set.
func (o *AnalysisSchemaAllOfResolveIp) HasHostname() bool {
	if o != nil && !IsNil(o.Hostname) {
		return true
	}

	return false
}

// SetHostname gets a reference to the given string and assigns it to the Hostname field.
func (o *AnalysisSchemaAllOfResolveIp) SetHostname(v string) {
	o.Hostname = &v
}

// GetResolvedIp returns the ResolvedIp field value
func (o *AnalysisSchemaAllOfResolveIp) GetResolvedIp() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ResolvedIp
}

// GetResolvedIpOk returns a tuple with the ResolvedIp field value
// and a boolean to check if the value has been set.
func (o *AnalysisSchemaAllOfResolveIp) GetResolvedIpOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ResolvedIp, true
}

// SetResolvedIp sets field value
func (o *AnalysisSchemaAllOfResolveIp) SetResolvedIp(v string) {
	o.ResolvedIp = v
}

func (o AnalysisSchemaAllOfResolveIp) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AnalysisSchemaAllOfResolveIp) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["durationInMs"] = o.DurationInMs
	if !IsNil(o.ErrorMessage) {
		toSerialize["errorMessage"] = o.ErrorMessage
	}
	if !IsNil(o.Hostname) {
		toSerialize["hostname"] = o.Hostname
	}
	toSerialize["resolvedIp"] = o.ResolvedIp
	return toSerialize, nil
}

func (o *AnalysisSchemaAllOfResolveIp) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"durationInMs",
		"resolvedIp",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAnalysisSchemaAllOfResolveIp := _AnalysisSchemaAllOfResolveIp{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varAnalysisSchemaAllOfResolveIp)

	if err != nil {
		return err
	}

	*o = AnalysisSchemaAllOfResolveIp(varAnalysisSchemaAllOfResolveIp)

	return err
}

type NullableAnalysisSchemaAllOfResolveIp struct {
	value *AnalysisSchemaAllOfResolveIp
	isSet bool
}

func (v NullableAnalysisSchemaAllOfResolveIp) Get() *AnalysisSchemaAllOfResolveIp {
	return v.value
}

func (v *NullableAnalysisSchemaAllOfResolveIp) Set(val *AnalysisSchemaAllOfResolveIp) {
	v.value = val
	v.isSet = true
}

func (v NullableAnalysisSchemaAllOfResolveIp) IsSet() bool {
	return v.isSet
}

func (v *NullableAnalysisSchemaAllOfResolveIp) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAnalysisSchemaAllOfResolveIp(val *AnalysisSchemaAllOfResolveIp) *NullableAnalysisSchemaAllOfResolveIp {
	return &NullableAnalysisSchemaAllOfResolveIp{value: val, isSet: true}
}

func (v NullableAnalysisSchemaAllOfResolveIp) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAnalysisSchemaAllOfResolveIp) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


