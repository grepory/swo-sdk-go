/*
SolarWinds Observability REST API

[Rest API Documentation](https://documentation.solarwinds.com/en/success_center/observability/content/api/api-swagger.htm)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package swov1

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the Jwt type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Jwt{}

// Jwt struct for Jwt
type Jwt struct {
	Scopes []string `json:"scopes"`
}

type _Jwt Jwt

// NewJwt instantiates a new Jwt object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewJwt(scopes []string) *Jwt {
	this := Jwt{}
	this.Scopes = scopes
	return &this
}

// NewJwtWithDefaults instantiates a new Jwt object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewJwtWithDefaults() *Jwt {
	this := Jwt{}
	return &this
}

// GetScopes returns the Scopes field value
func (o *Jwt) GetScopes() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Scopes
}

// GetScopesOk returns a tuple with the Scopes field value
// and a boolean to check if the value has been set.
func (o *Jwt) GetScopesOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Scopes, true
}

// SetScopes sets field value
func (o *Jwt) SetScopes(v []string) {
	o.Scopes = v
}

func (o Jwt) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Jwt) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["scopes"] = o.Scopes
	return toSerialize, nil
}

func (o *Jwt) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"scopes",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varJwt := _Jwt{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varJwt)

	if err != nil {
		return err
	}

	*o = Jwt(varJwt)

	return err
}

type NullableJwt struct {
	value *Jwt
	isSet bool
}

func (v NullableJwt) Get() *Jwt {
	return v.value
}

func (v *NullableJwt) Set(val *Jwt) {
	v.value = val
	v.isSet = true
}

func (v NullableJwt) IsSet() bool {
	return v.isSet
}

func (v *NullableJwt) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableJwt(val *Jwt) *NullableJwt {
	return &NullableJwt{value: val, isSet: true}
}

func (v NullableJwt) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableJwt) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


